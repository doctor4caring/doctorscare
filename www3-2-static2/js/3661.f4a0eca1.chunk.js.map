{"version":3,"file":"static/js/3661.f4a0eca1.chunk.js","mappings":"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","sources":["components/LookupData/Data.jsx","pages/SuperAdmin/Forms/FormsData/Questionnaires.jsx"],"sourcesContent":["const ROLE_TYPE = [\r\n  {\r\n    lookupId: 6,\r\n    value: \"Nurse\",\r\n  },\r\n  {\r\n    lookupId: 7,\r\n    value: \"Receptionist\",\r\n  },\r\n];\r\nconst GENDER_TYPE = [\r\n  {\r\n    lookupId: 101,\r\n    value: \"Male\",\r\n  },\r\n  {\r\n    lookupId: 102,\r\n    value: \"Female\",\r\n  },\r\n  {\r\n    lookupId: 103,\r\n    value: \"Other\",\r\n  },\r\n];\r\n\r\nconst DEVICE_STATE = {\r\n  Destroyed: \"destroyed\",\r\n  Error: \"error\",\r\n  Incoming: \"incoming\",\r\n  Registered: \"registered\",\r\n  Registering: \"registering\",\r\n  TokenWillExpire: \"tokenWillExpire\",\r\n  Unregistered: \"unregistered\",\r\n};\r\n\r\nconst CALL_STATE = {\r\n  Connected: \"connected\",\r\n  Accept: \"accept\",\r\n  Audio: \"audio\",\r\n  Cancel: \"cancel\",\r\n  Disconnect: \"disconnect\",\r\n  Error: \"error\",\r\n  Mute: \"mute\",\r\n  Reconnected: \"reconnected\",\r\n  Reconnecting: \"reconnecting\",\r\n  Reject: \"reject\",\r\n  Ringing: \"ringing\",\r\n  Sample: \"sample\",\r\n  Volume: \"volume\",\r\n  WarningCleared: \"warning-cleared\",\r\n  Warning: \"warning\",\r\n};\r\n\r\nconst ANSWER_TYPE = [\r\n  {\r\n    lookupId: 401,\r\n    name: \"Multiple Choice\",\r\n    value: \"Radio\",\r\n  },\r\n  {\r\n    lookupId: 402,\r\n    name: \"Checkbox\",\r\n    value: \"Checkbox\",\r\n  },\r\n  {\r\n    lookupId: 404,\r\n    name: \"Paragraph\",\r\n    value: \"TextBox\",\r\n  },\r\n];\r\n\r\nexport default DEVICE_STATE;\r\n\r\nexport { ROLE_TYPE, GENDER_TYPE, DEVICE_STATE, CALL_STATE, ANSWER_TYPE };\r\n","import React, { useState } from \"react\";\r\nimport { Button, Card, Col, Form, Row } from \"react-bootstrap\";\r\nimport { MdOutlineDeleteForever } from \"react-icons/md\";\r\nimport { FaPlus } from \"react-icons/fa6\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { PATH } from \"../../../../utils/path\";\r\n\r\nimport { createAdminPresForm, getAllAdminPresForm } from \"../../../../app/features/OnlinePrescriptionForm/OnlinePrescriptionForm.slice\";\r\nimport { ANSWER_TYPE } from \"../../../../components/LookupData/Data\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Questionnaires() {\r\n  const { handleSubmit, register } = useForm();\r\n  const [selectedType, setSelectedType] = useState(\"401\");\r\n  const [sections, setSections] = useState([\r\n    { question: \"\", options: [\"\"], selectedType: \"401\" },\r\n  ]);\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const user = JSON.parse(localStorage.getItem(\"family_doc_app\"));\r\n\r\n  const searchParams = new URLSearchParams(window.location.search);\r\n  let addQuestionData = searchParams.has(\"disease\");\r\n\r\n  const handleTypeChange = (e, index) => {\r\n    debugger;\r\n    setSelectedType(e.target.value);\r\n    const updatedSections = [...sections];\r\n    updatedSections[index].selectedType = e.target.value;\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  const handleAddSection = () => {\r\n    debugger;\r\n    setSections([\r\n      ...sections,\r\n      { question: \"\", options: [\"\"], selectedType: \"401\" },\r\n    ]);\r\n  };\r\n\r\n  // const handleAddOption = (sectionIndex) => {\r\n  //   debugger;\r\n  //   const updatedSections = [...sections];\r\n  //   updatedSections[sectionIndex].options.push(\"\");\r\n  //   setSections(updatedSections);\r\n  // };\r\n\r\n  const handleQuestionChange = (sectionIndex, value) => {\r\n    const updatedSections = [...sections];\r\n    updatedSections[sectionIndex].question = value;\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  const handleAddOption = (sectionIndex) => {\r\n    const updatedSections = [...sections];\r\n    updatedSections[sectionIndex].options = [\r\n      ...sections[sectionIndex].options,\r\n      \"\",\r\n    ];\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  const handleOptionChange = (sectionIndex, optionIndex, value) => {\r\n    debugger;\r\n    const updatedSections = [...sections];\r\n    updatedSections[sectionIndex].options[optionIndex] = value;\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  const handleCloseOption = (sectionIndex, optionIndex) => {\r\n    debugger;\r\n    const updatedSections = [...sections];\r\n    updatedSections[sectionIndex].options.splice(optionIndex, 1);\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  const handleDeleteSection = (index) => {\r\n    debugger;\r\n    const updatedSections = [...sections];\r\n    updatedSections.splice(index, 1);\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  const handleSwitchChange = (sectionIndex, isChecked) => {\r\n    console.log(`Switch in section ${sectionIndex} is now ${isChecked}`);\r\n  };\r\n\r\n  function onCreateSuccess() {\r\n    if (user?.roleId === 1) {\r\n      navigate(PATH.SUPERADMIN_FORMS);\r\n    } else if (user?.roleId === 4) {\r\n      navigate(PATH.ADMIN_FORMS);\r\n    }\r\n    \r\n    let finalData = {\r\n      Search: \"\"\r\n    };\r\n    dispatch(getAllAdminPresForm(finalData));\r\n  }\r\n\r\n  function createOnlinePresForm(submittedData) {\r\n    debugger;\r\n    const finalData = {\r\n      formId: 0,\r\n      title: submittedData?.title,\r\n      isActive: true,\r\n      formQuestionList: sections.map((value, index) => ({\r\n        questionId: 0,\r\n        question: value.question,\r\n        answerTypeId: value?.selectedType,\r\n        answerTypeName:\r\n          value?.selectedType === \"401\"\r\n            ? \"Radio\"\r\n            : value?.selectedType === \"402\"\r\n            ? \"Checkbox\"\r\n            : value?.selectedType === \"404\"\r\n            ? \"TextBox\"\r\n            : \"\",\r\n        formId: 0,\r\n        formAnswersList: value.options.map((value, index) => ({\r\n          formAnswereId: 0,\r\n          formQuestionId: 0,\r\n          answerLabel: value? value: \"Answer Text\",\r\n        })),\r\n      })),\r\n    };\r\n    dispatch(createAdminPresForm({finalData, onCreateSuccess}));\r\n  }\r\n  return (\r\n    <>\r\n      <h5>Questionnaires</h5>\r\n      <Card className=\"shadow-sm custom-questionnaires\">\r\n        <Form onSubmit={handleSubmit(createOnlinePresForm)}>\r\n          <Row className=\"m-3 d-flex justify-content-center flex-column\">\r\n            <Col xl={7} lg={10} xs={12} className=\"mx-auto mb-3 p-0\">\r\n              <Form.Group\r\n                className=\"px-3 pt-2 pb-4 rounded mb-3\"\r\n                controlId=\"formTitle\"\r\n                style={{\r\n                  boxShadow: \"0px 0px 24px 0px #0000000A\",\r\n                  borderTop: \"6px solid #6045EB\",\r\n                }}\r\n              >\r\n                <Form.Label className=\"mt-2\">Enter Form Title</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Form Title\"\r\n                  maxLength={250}\r\n                  {...register(\"title\", { required: true })}\r\n                  // disabled={addQuestionData}\r\n                />\r\n              </Form.Group>\r\n              {sections.length === 0 && (\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"Admin-Add-btn px-3 float-end\"\r\n                >\r\n                  <FaPlus size={24} onClick={handleAddSection} />\r\n                </Button>\r\n              )}\r\n            </Col>\r\n            {sections.map((section, sectionIndex) => (\r\n              <Col\r\n                key={sectionIndex}\r\n                xl={7}\r\n                lg={10}\r\n                xs={12}\r\n                className=\"p-3 rounded mx-auto mb-3\"\r\n                style={{\r\n                  boxShadow: \"0px 0px 24px 0px #0000000A\",\r\n                  borderLeft: \"6px solid #3F8BFC\",\r\n                }}\r\n              >\r\n                <Form.Group\r\n                  className=\"mb-3\"\r\n                  controlId={`formQuestion${sectionIndex}`}\r\n                >\r\n                  <div className=\"d-flex justify-content-between flex-wrap align-items-center custom-col-rev mb-2\">\r\n                    <Form.Label className=\"text-w-full\">\r\n                      Enter Question\r\n                    </Form.Label>\r\n                    <Col xl={5} sm={6} xs={12}>\r\n                      <Form.Select\r\n                        aria-label=\"Select Type\"\r\n                        onChange={(e) => {\r\n                          debugger;\r\n                          handleTypeChange(e, sectionIndex);\r\n                        }}\r\n                        defaultValue={section.selectedType || selectedType}\r\n                      >\r\n                        {ANSWER_TYPE.map((type) => {\r\n                          debugger;\r\n                          return (\r\n                            <option value={type?.lookupId}>\r\n                              {type.name}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </Form.Select>\r\n                    </Col>\r\n                  </div>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Question\"\r\n                    required={true}\r\n                    maxLength={250}\r\n                    value={section.question} // Set the value of the input\r\n                    onChange={(e) =>\r\n                      handleQuestionChange(sectionIndex, e.target.value)\r\n                    }\r\n                  />\r\n                  <div className=\"mt-2 questionnaires-option\">\r\n                    {section.selectedType === \"401\" && (\r\n                      <>\r\n                        {section.options.map((option, optionIndex) => (\r\n                          <div\r\n                            className=\"d-flex align-items-center\"\r\n                            key={`radio-${optionIndex}`}\r\n                          >\r\n                            <Form.Check\r\n                              label={\r\n                                <>\r\n                                  <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Add option\"\r\n                                    className=\"border-0 ms-2\"\r\n                                    value={option}\r\n                                    onChange={(e) =>\r\n                                      handleOptionChange(\r\n                                        sectionIndex,\r\n                                        optionIndex,\r\n                                        e.target.value\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                </>\r\n                              }\r\n                              name={`group${sectionIndex}`}\r\n                              type=\"radio\"\r\n                              id={`radio-${optionIndex}`}\r\n                              className=\"d-flex align-items-center mb-1 w-100\"\r\n                            />\r\n                            <span className=\"mx-3\">\r\n                              <AiOutlineClose\r\n                                size={18}\r\n                                onClick={() =>\r\n                                  handleCloseOption(sectionIndex, optionIndex)\r\n                                }\r\n                              />\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                        <span\r\n                          className=\"text-cursor-pointer text-decoration-underline\"\r\n                          style={{ color: \"#3F8BFC\", fontSize: \"0.9em\" }}\r\n                          onClick={() => handleAddOption(sectionIndex)}\r\n                        >\r\n                          Add another option\r\n                        </span>\r\n                      </>\r\n                    )}\r\n                    {section.selectedType === \"404\" && (\r\n                      <>\r\n                        <Form.Control\r\n                          as=\"textarea\"\r\n                          rows={3}\r\n                          placeholder=\"Answer Text\"\r\n                          className=\"mt-2\"\r\n                          disabled={true}\r\n                        />\r\n                      </>\r\n                    )}\r\n                    {section.selectedType === \"402\" && (\r\n                      <>\r\n                        {section.options.map((option, optionIndex) => (\r\n                          <div\r\n                            key={`checkbox-${optionIndex}`}\r\n                            className=\"d-flex align-items-center\"\r\n                          >\r\n                            <Form.Check\r\n                              label={\r\n                                <>\r\n                                  <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Add option\"\r\n                                    className=\"border-0 ms-2\"\r\n                                    value={option}\r\n                                    onChange={(e) =>\r\n                                      handleOptionChange(\r\n                                        sectionIndex,\r\n                                        optionIndex,\r\n                                        e.target.value\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                </>\r\n                              }\r\n                              name={`group${sectionIndex}`}\r\n                              type=\"checkbox\"\r\n                              id={`checkbox-${optionIndex}`}\r\n                              className=\"d-flex align-items-center mb-1 w-100\"\r\n                            />\r\n                            <span className=\"mx-3\">\r\n                              <AiOutlineClose\r\n                                size={18}\r\n                                onClick={() =>\r\n                                  handleCloseOption(sectionIndex, optionIndex)\r\n                                }\r\n                              />\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                        <span\r\n                          className=\"text-cursor-pointer text-decoration-underline\"\r\n                          style={{ color: \"#3F8BFC\", fontSize: \"0.9em\" }}\r\n                          onClick={() => handleAddOption(sectionIndex)}\r\n                        >\r\n                          Add another option\r\n                        </span>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </Form.Group>\r\n                <div className=\"w-100 d-flex flex-wrap justify-content-end\">\r\n                  <span style={{ borderRight: \"1px solid #CACACA\" }}>\r\n                    <FaPlus\r\n                      size={24}\r\n                      color=\"#CACACA\"\r\n                      className=\"mx-2 text-cursor-pointer\"\r\n                      data-toggle=\"tooltip\"\r\n                      data-placement=\"top\"\r\n                      title=\"Add Question\"\r\n                      onClick={handleAddSection}\r\n                    />\r\n                  </span>\r\n                  <span\r\n                    className=\"me-2\"\r\n                    style={{ borderRight: \"1px solid #CACACA\" }}\r\n                  >\r\n                    <MdOutlineDeleteForever\r\n                      size={26}\r\n                      color=\"#CACACA\"\r\n                      className=\"mx-2 text-cursor-pointer\"\r\n                      data-toggle=\"tooltip\"\r\n                      data-placement=\"top\"\r\n                      title=\"Delete\"\r\n                      onClick={() => handleDeleteSection(sectionIndex)}\r\n                    />\r\n                  </span>\r\n                  <Form.Check\r\n                    type=\"switch\"\r\n                    id={`custom-switch-${sectionIndex}`}\r\n                    label=\"Active\"\r\n                    {...register(\"isActive\")}\r\n                    defaultChecked\r\n                    onChange={(e) => {\r\n                      debugger;\r\n                      handleSwitchChange(sectionIndex, e.target.checked);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Col>\r\n            ))}\r\n            {sections.length !== 0 && (\r\n              <Col>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"Admin-Add-btn fw-bold float-end\"\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Col>\r\n            )}\r\n          </Row>\r\n        </Form>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Questionnaires;\r\n"],"names":["ROLE_TYPE","lookupId","value","GENDER_TYPE","DEVICE_STATE","Destroyed","Error","Incoming","Registered","Registering","TokenWillExpire","Unregistered","CALL_STATE","Connected","Accept","Audio","Cancel","Disconnect","Mute","Reconnected","Reconnecting","Reject","Ringing","Sample","Volume","WarningCleared","Warning","ANSWER_TYPE","name","handleSubmit","register","useForm","selectedType","setSelectedType","useState","sections","setSections","question","options","navigate","useNavigate","dispatch","useDispatch","user","JSON","parse","localStorage","getItem","URLSearchParams","window","location","search","has","handleAddSection","handleAddOption","sectionIndex","updatedSections","handleOptionChange","optionIndex","handleCloseOption","splice","onCreateSuccess","roleId","PATH","SUPERADMIN_FORMS","ADMIN_FORMS","getAllAdminPresForm","Search","_jsxs","_Fragment","children","_jsx","Card","className","Form","onSubmit","submittedData","finalData","formId","title","isActive","formQuestionList","map","index","questionId","answerTypeId","answerTypeName","formAnswersList","formAnswereId","formQuestionId","answerLabel","createAdminPresForm","Row","Col","xl","lg","xs","Group","controlId","style","boxShadow","borderTop","Label","Control","type","placeholder","maxLength","required","length","Button","variant","FaPlus","size","onClick","section","borderLeft","concat","sm","Select","onChange","e","handleTypeChange","target","defaultValue","handleQuestionChange","option","Check","label","id","AiOutlineClose","color","fontSize","as","rows","disabled","borderRight","MdOutlineDeleteForever","handleDeleteSection","defaultChecked","handleSwitchChange","isChecked","console","log","checked"],"sourceRoot":""}