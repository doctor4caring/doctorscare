{"version":3,"file":"static/js/1309.b382d7a7.chunk.js","mappings":"+KAIe,SAASA,EAAWC,GAA0B,IAAzB,SAAEC,KAAaC,GAAOF,EACxD,OACEG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8CAA6CC,SAAA,EAC1DC,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,QAAO,CACXP,SAAUA,EACVQ,KAAK,OACLC,YAAY,SACZN,UAAS,wBAAAO,OAA0BT,EAAME,WACzC,aAAW,YAEbE,EAAAA,EAAAA,KAACM,EAAAA,IAAQ,CAACC,KAAM,GAAIT,UAAU,qBAGpC,C,uECZe,SAASU,EAAUZ,GAChC,MAAM,SACJa,EAAQ,aACRC,EAAY,UACZC,EAAS,WACTC,EAAU,aACVC,EAAY,iBACZC,EAAgB,YAChBC,GACEnB,EAYEoB,EAAkB,CACtBC,eAAgB,EAChBC,eAAgB,EAChBC,mBAAmB,EACnBC,kBAA2B,OAATT,QAAS,IAATA,OAAS,EAATA,EAAWU,QAAS,EACtCC,iBAAiB,EACjBC,WAAW,EACXC,wBAbkBC,CAACC,EAAMC,EAAIpB,KAC7BP,EAAAA,EAAAA,KAAA,QAAMF,UAAU,yCAAwCC,UAC5C,OAATY,QAAS,IAATA,OAAS,EAATA,EAAWU,QAAS,EAAC,GAAAhB,OAAMqB,EAAI,QAAArB,OAAOsB,EAAE,YAAAtB,OAAWE,EAAI,YAAa,OAYvEqB,kBAAkB,EAClBC,gBAAiB,CACf,CACEC,KAAMf,EACNgB,MAAOhB,KAKb,OACEf,EAAAA,EAAAA,KAACgC,EAAAA,EAAc,CACbvB,SAAUA,EACVwB,cAAc,eACdC,KAAMvB,EACNwB,QAASzB,EACT0B,YAAYC,EAAAA,EAAAA,IAAkB,IACzBrB,EACHsB,KAAM1B,EACN2B,UAAW1B,EACX2B,aAAc1B,IAEhB2B,iBAvCqBC,KAChB1C,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iBAAgBC,SAAC,0BAuCnC4C,QAAM,EACNC,cAAeA,OACfC,UAAU,EACVC,eAAe,oBAGrB,CAQAtC,EAAUuC,aAAe,CACvBX,YAAY,E,kDCrEd,MAiBA,EAjB2B,WAAkB,IAAjBY,EAAKC,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAClC,MAAOE,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IACzCC,GAAaC,EAAAA,EAAAA,QAAO,MAY1B,MAAO,CAACJ,GAVaK,EAAAA,EAAAA,cAAaC,IAC5BH,EAAWI,SACbC,aAAaL,EAAWI,SAE1BJ,EAAWI,QAAUE,YAAW,KAC9BN,EAAWI,QAAU,KACrBN,EAAeK,EAAMI,OAAO9B,MAAM,GACjCiB,EAAM,GACR,CAACA,IAGN,C,8NCFe,SAASc,EAAYpE,GAIhC,IAJiC,SACnCqE,EAAQ,eACRC,EAAc,kBACdC,GACDvE,EACC,MAAOkB,EAAYsD,IAAiBb,EAAAA,EAAAA,UAAS,GACvCc,GAAWC,EAAAA,EAAAA,UAAQ,IAAM,GAAG,KAC3BjB,EAAakB,IAAgBC,EAAAA,EAAAA,GAAmB,MACjD,6BAAEC,EAA4B,QAAEC,EAAO,UAAEC,EAAS,UAAEC,IACxDC,EAAAA,EAAAA,KAAaC,IAAe,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,qBAAsB,KAEhDC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAY,CAChBC,QAA2B,IAAnBpB,EAA0B,EAAIpD,EACtCyE,KAAMlB,EACNmB,cAAc,EACdC,aAAcxB,EACdyB,OAAQrC,GAA4B,IAEtC2B,GAASW,EAAAA,EAAAA,IAAsBN,GAAW,GACzC,CAACL,EAAUlE,EAAYmD,EAAUC,EAAgBb,IAEpD,MAkBMhB,EAAU,CACd,CACEuD,UAAW,sBACX5D,KAAM,KACN6D,YAAa,CAAEC,gBAAiB,YAElC,CACEF,UAAW,UACX5D,KAAM,eACN6D,YAAa,CAAEC,gBAAiB,UAAWC,MAAO,OAClDC,UAAWA,CAAChE,EAAMiE,KAChBlG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCC,EAAAA,EAAAA,KAAA,OACEgG,IAAG,oCAAA3F,OAAA,GAAAA,OAA4C,OAAH0F,QAAG,IAAHA,OAAG,EAAHA,EAAKE,SAAO,gCACxDC,IAAI,UACJpG,UAAU,OACVqG,MAAO,CAAEC,aAAc,MAAOP,MAAO,aAEvChG,EAAAA,EAAAA,MAAA,QAAMsG,MAAO,CAAEE,WAAY,OAAQtG,SAAA,EACjCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,sBAAqBC,SAAA,GAAAM,OAAQ,OAAH0F,QAAG,IAAHA,OAAG,EAAHA,EAAKE,YAC5CjG,EAAAA,EAAAA,KAAA,KAAGF,UAAU,wBAAuBC,SAAK,OAAHgG,QAAG,IAAHA,OAAG,EAAHA,EAAKO,wBAC3CtG,EAAAA,EAAAA,KAAA,KAAGF,UAAU,wBAAwBqG,MAAO,CAAEI,MAAO,WAAYxG,SAC3D,OAAHgG,QAAG,IAAHA,OAAG,EAAHA,EAAKS,sBAMhB,CACEd,UAAW,YACX5D,KAAM,aACN6D,YAAa,CAAEC,gBAAiB,WAChCE,UAAYW,GACHA,EAAOC,IAAOD,GAAME,OAAO,cAAgB,OAGtD,CACEjB,UAAW,aACX5D,KAAM,SACN6D,YAAa,CAAEC,gBAAiB,YAElC,CACEF,UAAW,sBACX5D,KAAM,eACN6D,YAAa,CAAEC,gBAAiB,WAChCE,UAAWA,CAACC,EAAKU,KACfzG,EAAAA,EAAAA,KAAA,KAAGF,UAAU,MAAKC,SACX,OAAJ0G,QAAI,IAAJA,GAAAA,EAAMG,oBAAsB,QAAU,eAI7C,CACElB,UAAW,gBACX5D,KAAM,iBACN+E,MAAM,EACNlB,YAAa,CAAEC,gBAAiB,UAAWC,MAAO,SAClDC,UAAWA,CAACC,EAAKU,KACfzG,EAAAA,EAAAA,KAAA,KACEF,UAAS,8BAAAO,OACU,cAAb,OAAJoG,QAAI,IAAJA,OAAI,EAAJA,EAAMK,QAAwB,kBAAoB,iBACjD/G,SAEe,cAAb,OAAJ0G,QAAI,IAAJA,OAAI,EAAJA,EAAMK,QAAwB,SAAW,UAIhD,CACEpB,UAAW,SACX5D,KAAM,UACN+E,MAAM,EAENf,UAAWA,CAACC,EAAKU,KAEbzG,EAAAA,EAAAA,KAAA+G,EAAAA,SAAA,CAAAhH,UACEF,EAAAA,EAAAA,MAACmH,EAAAA,EAAM,CACLrF,GAAI,CACFsF,SAAUC,EAAAA,EAAKC,yBAAyBC,QACtC,eAAe,eAAD/G,OACK,OAAJoG,QAAI,IAAJA,OAAI,EAAJA,EAAMR,QAAQmB,QAAQ,KAAM,OAE7CC,OAAO,cAADhH,OAAoB,OAAJoG,QAAI,IAAJA,OAAI,EAAJA,EAAMa,UAAS,YAAAjH,OAAe,OAAJoG,QAAI,IAAJA,OAAI,EAAJA,EAAMc,QACtD3C,MAAO,CACL0C,UAAe,OAAJb,QAAI,IAAJA,OAAI,EAAJA,EAAMa,UACjBC,OAAY,OAAJd,QAAI,IAAJA,OAAI,EAAJA,EAAMc,SAGlBC,QAASA,IAnGGf,KACtBzB,EACEkC,EAAAA,EAAKC,yBAAyBC,QAC5B,eAAe,eAAD/G,OACK,OAAJoG,QAAI,IAAJA,OAAI,EAAJA,EAAMR,QAAQmB,QAAQ,KAAM,KAAI,eAAA/G,OACzC,OAAJoG,QAAI,IAAJA,OAAI,EAAJA,EAAMa,UAAS,YAAAjH,OACF,OAAJoG,QAAI,IAAJA,OAAI,EAAJA,EAAMc,SAEnB,CACE3C,MAAO6B,GAEV,EAwFwBgB,CAAehB,GAC9B3G,UAAU,uCAAsCC,SAAA,EAEhDC,EAAAA,EAAAA,KAAC0H,EAAAA,IAAS,IAAG,gBAKrB/B,YAAa,CAAEC,gBAAiB,aAIpC,OACE5F,EAAAA,EAAAA,KAAA+G,EAAAA,SAAA,CAAAhH,UACEF,EAAAA,EAAAA,MAAC8H,EAAAA,EAAI,CAAC7H,UAAU,qCAAoCC,SAAA,EAClDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6FAA4FC,UACzGC,EAAAA,EAAAA,KAACP,EAAAA,EAAW,CAACE,SAAU0E,EAAcvE,UAAU,WAGhD2E,GACCzE,EAAAA,EAAAA,KAAC4H,EAAAA,EAAgB,CAACC,YAAY,IAC5BnD,GACF1E,EAAAA,EAAAA,KAAA,QAAMF,UAAU,mBAAkBC,UAChCC,EAAAA,EAAAA,KAACQ,EAAAA,EAAS,CACRE,aAAcyB,EACdxB,UAC8B,OAA5B4D,QAA4B,IAA5BA,GAAAA,EAA8BrC,KACE,OAA5BqC,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BrC,KAC9B,GAENzB,SAAS,sBACTG,WAAYA,EACZC,aAA0C,OAA5B0D,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BuD,YAC5C/G,YAAaoD,EACbrD,iBA1IaA,CAACwB,EAAMyF,KAC9B7D,EAAc5B,GACd2B,GAAkB,EAAM,EAyId4C,KAAM,CAAEnB,UAAW,sBAAuBsC,MAAO,YAGnDxD,GACFxE,EAAAA,EAAAA,KAAA,KAAGF,UAAU,0CAAyCC,SAAC,kBAGrD,SAIZ,CCzLe,SAASkI,IACtB,MAAOC,EAAKC,IAAU9E,EAAAA,EAAAA,UAAS,OACxBW,EAAgBC,IAAqBZ,EAAAA,EAAAA,UAAS,IAE/C+E,EAAqBrG,IACzBoG,EAAOpG,EAAM,EAGf,OACElC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gCAA+BC,SAAA,EAC5CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAACgH,EAAAA,EAAM,CACLqB,QAAQ,UACRb,QAASA,KACPY,EAAkB,MAClBnE,GAAkB,EAAK,EAEzBnE,UAAS,4BAAAO,OACC,OAAR6H,EAAe,iBAAmB,WACjCnI,SACJ,SAGDC,EAAAA,EAAAA,KAACgH,EAAAA,EAAM,CACLqB,QAAQ,UACRb,QAASA,KACPY,EAAkB,KAClBnE,GAAkB,EAAK,EAEzBnE,UAAS,4BAAAO,OACC,MAAR6H,EAAc,iBAAmB,WAChCnI,SACJ,aAGDC,EAAAA,EAAAA,KAACgH,EAAAA,EAAM,CACLqB,QAAQ,UACRb,QAASA,KACPY,EAAkB,KAClBnE,GAAkB,EAAK,EAEzBnE,UAAS,4BAAAO,OACC,MAAR6H,EAAc,iBAAmB,WAChCnI,SACJ,eAGDC,EAAAA,EAAAA,KAACgH,EAAAA,EAAM,CACLqB,QAAQ,UACRb,QAASA,KACPY,EAAkB,KAClBnE,GAAkB,EAAK,EAEzBnE,UAAS,4BAAAO,OACC,MAAR6H,EAAc,iBAAmB,WAChCnI,SACJ,iBAIHC,EAAAA,EAAAA,KAAC8D,EAAY,CACXC,SAAUmE,EACVlE,eAAgBA,EAChBC,kBAAmBA,MAI3B,CClEA,MAAMqE,EAAa5I,IAAA,IAAC,MAAEqC,EAAK,MAAEwG,EAAK,UAAE9D,EAAS,QAAED,EAAO,UAAEE,GAAWhF,EAAA,OACjEM,EAAAA,EAAAA,KAAC2H,EAAAA,EAAI,CAAC7H,UAAU,QAAOC,UACrBC,EAAAA,EAAAA,KAAC2H,EAAAA,EAAKa,KAAI,CAAC1I,UAAU,+DAA8DC,SAChF2E,GACC7E,EAAAA,EAAAA,MAAAkH,EAAAA,SAAA,CAAAhH,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,UAASC,SAAEgC,KACzB/B,EAAAA,EAAAA,KAAC2H,EAAAA,EAAKc,MAAK,CAAC3I,UAAU,MAAKC,SAAEwI,OAE7B9D,GACFzE,EAAAA,EAAAA,KAAA,KACEF,UAAU,6BACVqG,MAAO,CACLI,MAAO,WACPxG,SACH,eAGCyE,GACFxE,EAAAA,EAAAA,KAAA,KAAGF,UAAU,yCAAwCC,SAAC,kBACpD,QAED,EAyCT,QAtCA,WAAwC,IAAD2I,EAAAC,EAAAC,EAAAC,EACrC,MAAM/D,GAAWC,EAAAA,EAAAA,OAEX,gBAAE+D,EAAe,UAAErE,EAAS,UAAEC,EAAS,QAAEF,IAAYG,EAAAA,EAAAA,KACxDC,GAAe,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,qBAGdkE,EAAW,CACf,CAAEhH,MAAsB,OAAf+G,QAAe,IAAfA,GAAqB,QAANJ,EAAfI,EAAiB5G,YAAI,IAAAwG,OAAN,EAAfA,EAAuBM,IAAKT,MAAO,OAC5C,CAAExG,MAAsB,OAAf+G,QAAe,IAAfA,GAAqB,QAANH,EAAfG,EAAiB5G,YAAI,IAAAyG,OAAN,EAAfA,EAAuBM,QAASV,MAAO,WAChD,CAAExG,MAAsB,OAAf+G,QAAe,IAAfA,GAAqB,QAANF,EAAfE,EAAiB5G,YAAI,IAAA0G,OAAN,EAAfA,EAAuBM,UAAWX,MAAO,aAClD,CAAExG,MAAsB,OAAf+G,QAAe,IAAfA,GAAqB,QAAND,EAAfC,EAAiB5G,YAAI,IAAA2G,OAAN,EAAfA,EAAuBM,SAAUZ,MAAO,aAOnD,OAJArD,EAAAA,EAAAA,YAAU,KACRJ,GAASsE,EAAAA,EAAAA,MAAsB,GAC9B,CAACtE,KAGFjF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gCAA+BC,SAC3CgJ,EAASM,KAAI,CAACnH,EAAMoH,KACnBtJ,EAAAA,EAAAA,KAACsI,EAAU,IAELpG,EACJuC,UAAWA,EACXD,QAASA,EACTE,UAAWA,GAJN4E,QAQXtJ,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACiI,EAAkB,QAI3B,C,kBC1De,SAASsB,EAASC,EAAS1J,GACpC0J,EAAQC,UAAWD,EAAQC,UAAUC,IAAI5J,GCHhC,SAAkB0J,EAAS1J,GACxC,OAAI0J,EAAQC,YAAoB3J,GAAa0J,EAAQC,UAAUE,SAAS7J,IACkC,KAAlG,KAAO0J,EAAQ1J,UAAU8J,SAAWJ,EAAQ1J,WAAa,KAAK+J,QAAQ,IAAM/J,EAAY,IAClG,CDAoEgK,CAASN,EAAS1J,KAA6C,kBAAtB0J,EAAQ1J,UAAwB0J,EAAQ1J,UAAY0J,EAAQ1J,UAAY,IAAMA,EAAe0J,EAAQO,aAAa,SAAUP,EAAQ1J,WAAa0J,EAAQ1J,UAAU8J,SAAW,IAAM,IAAM9J,GACvS,C,kCEVA,SAASkK,EAAiBC,EAAWC,GACnC,OAAOD,EAAU7C,QAAQ,IAAI+C,OAAO,UAAYD,EAAgB,YAAa,KAAM,MAAM9C,QAAQ,OAAQ,KAAKA,QAAQ,aAAc,GACtI,CASe,SAASgD,EAAYZ,EAAS1J,GACvC0J,EAAQC,UACVD,EAAQC,UAAUY,OAAOvK,GACa,kBAAtB0J,EAAQ1J,UACxB0J,EAAQ1J,UAAYkK,EAAiBR,EAAQ1J,UAAWA,GAExD0J,EAAQO,aAAa,QAASC,EAAiBR,EAAQ1J,WAAa0J,EAAQ1J,UAAU8J,SAAW,GAAI9J,GAEzG,C,iGChBA,QAAgBA,GAA0BwK,EAAAA,YAAiB,CAACC,EAAGC,KAAqBxK,EAAAA,EAAAA,KAAK,MAAO,IAC3FuK,EACHC,IAAKA,EACL1K,UAAW2K,IAAWF,EAAEzK,UAAWA,M","sources":["components/SearchInput/index.jsx","components/Table/DataTable.jsx","hook/useDebouncedSearch.js","pages/Doctor/OnlinePrescriptionForms/PrescriptionStatus/AllPresForms/index.jsx","pages/Doctor/OnlinePrescriptionForms/PrescriptionStatus/index.jsx","pages/Doctor/OnlinePrescriptionForms/index.jsx","../node_modules/dom-helpers/esm/addClass.js","../node_modules/dom-helpers/esm/hasClass.js","../node_modules/dom-helpers/esm/removeClass.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { BiSearch } from \"react-icons/bi\";\r\n\r\nexport default function SearchInput({ onChange, ...props }) {\r\n  return (\r\n    <div className=\"custom__search-input me-2 position-relative\">\r\n      <Form.Control\r\n        onChange={onChange}\r\n        type=\"text\"\r\n        placeholder=\"Search\"\r\n        className={`search-field-spacing ${props.className}`}\r\n        aria-label=\"Search\"\r\n      />\r\n      <BiSearch size={22} className=\"searchbar-icon\" />\r\n    </div>\r\n  );\r\n}\r\n","import BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function DataTable(props) {\r\n  const {\r\n    keyField,\r\n    tableColumns,\r\n    tableData,\r\n    pageNumber,\r\n    totalRecords,\r\n    handlePageChange,\r\n    dataPerPage,\r\n  } = props;\r\n\r\n  const emptyDataMessage = () => {\r\n    return <p className=\"record-message\">No Records to Display</p>;\r\n  };\r\n\r\n  const customTotal = (from, to, size) => (\r\n    <span className=\"react-bootstrap-table-pagination-total\">\r\n      {tableData?.length > 0 ? `${from} to ${to} out of ${size} entries` : null}\r\n    </span>\r\n  );\r\n\r\n  const paginateOptions = {\r\n    paginationSize: 5,\r\n    pageStartIndex: 1,\r\n    alwaysShowAllBtns: true,\r\n    withFirstAndLast: tableData?.length > 5 ? true : false,\r\n    hideSizePerPage: true,\r\n    showTotal: true,\r\n    paginationTotalRenderer: customTotal,\r\n    disablePageTitle: true,\r\n    sizePerPageList: [\r\n      {\r\n        text: dataPerPage,\r\n        value: dataPerPage,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <BootstrapTable\r\n      keyField={keyField}\r\n      headerClasses=\"header-class\"\r\n      data={tableData}\r\n      columns={tableColumns}\r\n      pagination={paginationFactory({\r\n        ...paginateOptions,\r\n        page: pageNumber,\r\n        totalSize: totalRecords,\r\n        onPageChange: handlePageChange,\r\n      })}\r\n      noDataIndication={emptyDataMessage}\r\n      remote\r\n      onTableChange={() => {}}\r\n      bordered={false}\r\n      wrapperClasses=\"table-responsive\"\r\n    />\r\n  );\r\n}\r\nDataTable.propTypes = {\r\n  tableData: PropTypes.array.isRequired,\r\n  tableColumns: PropTypes.array.isRequired,\r\n  keyField: PropTypes.node.isRequired,\r\n  pagination: PropTypes.bool,\r\n  paginateOptions: PropTypes.object,\r\n};\r\nDataTable.defaultProps = {\r\n  pagination: true,\r\n};\r\n","import { useState, useRef, useCallback } from 'react';\r\n\r\nconst useDebouncedSearch = (delay = 500) => {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const lastChange = useRef(null);\r\n\r\n  const handleSearch = useCallback((event) => {\r\n    if (lastChange.current) {\r\n      clearTimeout(lastChange.current);\r\n    }\r\n    lastChange.current = setTimeout(() => {\r\n      lastChange.current = null;\r\n      setSearchValue(event.target.value);\r\n    }, delay);\r\n  }, [delay]);\r\n\r\n  return [searchValue, handleSearch];\r\n};\r\n\r\nexport default useDebouncedSearch;\r\n","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport { AiFillEye } from \"react-icons/ai\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { PATH } from \"../../../../../utils/path\";\r\nimport { getAllPatientPresForm } from \"../../../../../app/features/PatientOnlinePrescription/PatientOnlinePrescription.slice\";\r\nimport FullScreenLoader from \"../../../../../authorization/FullScreenLoader\";\r\nimport DataTable from \"../../../../../components/Table/DataTable\";\r\nimport useDebouncedSearch from \"../../../../../hook/useDebouncedSearch\";\r\nimport SearchInput from \"../../../../../components/SearchInput\";\r\n\r\nexport default function AllPresForms({\r\n  keyValue,\r\n  selectedFilter,\r\n  setSelectedFilter,\r\n}) {\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const pageSize = useMemo(() => 5, []);\r\n  const [searchValue, handleSearch] = useDebouncedSearch(500);\r\n  const { getAllPatientOnlinePrescForm, isError, isLoading, isSuccess } =\r\n    useSelector((state) => state?.patientOnlinePresc || []);\r\n\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const finalData = {\r\n      PageNo: selectedFilter === true ? 1 : pageNumber,\r\n      Size: pageSize,\r\n      isPagination: true,\r\n      FormStatusId: keyValue,\r\n      Search: searchValue ? searchValue : \"\",\r\n    };\r\n    dispatch(getAllPatientPresForm(finalData));\r\n  }, [dispatch, pageNumber, keyValue, selectedFilter, searchValue]);\r\n\r\n  const handlePageChange = (page, sizePerPage) => {\r\n    setPageNumber(page);\r\n    setSelectedFilter(false);\r\n  };\r\n\r\n  const handleShowForm = (cell) => {\r\n    navigate(\r\n      PATH.DOCTOR_PRESCRIPTION_FORM.replace(\r\n        \":patientName\",\r\n        `patientName=${cell?.patient.replace(/ /g, \"-\")}?patientId=${\r\n          cell?.patientId\r\n        }&formId=${cell?.formId}`\r\n      ),\r\n      {\r\n        state: cell,\r\n      }\r\n    );\r\n  };\r\n  const columns = [\r\n    {\r\n      dataField: \"patientFormStatusId\",\r\n      text: \"ID\",\r\n      headerStyle: { backgroundColor: \"#F1F1F1\" },\r\n    },\r\n    {\r\n      dataField: \"patient\",\r\n      text: \"Patient Name\",\r\n      headerStyle: { backgroundColor: \"#F1F1F1\", width: \"17%\" },\r\n      formatter: (text, row) => (\r\n        <div className=\"d-flex align-items-center\">\r\n          <img\r\n            src={`https://ui-avatars.com/api/?name=${`${row?.patient}`}&background=000071&color=fff`}\r\n            alt=\"patient\"\r\n            className=\"me-2\"\r\n            style={{ borderRadius: \"50%\", width: \"3.3rem\" }}\r\n          />\r\n          <span style={{ lineHeight: \"1.2\" }}>\r\n            <p className=\"m-0 table-bold-text\">{`${row?.patient}`}</p>\r\n            <p className=\"m-0 table-normal-text\">{row?.patientPharmacyEmail}</p>\r\n            <p className=\"m-0 table-normal-text\" style={{ color: \"#999999\" }}>\r\n              {row?.patientPhone}\r\n            </p>\r\n          </span>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      dataField: \"orderDate\",\r\n      text: \"Order Date\",\r\n      headerStyle: { backgroundColor: \"#F1F1F1\" },\r\n      formatter: (cell) => {\r\n        return cell ? moment(cell).format(\"DD/MM/YYYY\") : \"N/A\";\r\n      },\r\n    },\r\n    {\r\n      dataField: \"formStatus\",\r\n      text: \"Status\",\r\n      headerStyle: { backgroundColor: \"#F1F1F1\" },\r\n    },\r\n    {\r\n      dataField: \"isPrescriptionAdded\",\r\n      text: \"Prescription\",\r\n      headerStyle: { backgroundColor: \"#F1F1F1\" },\r\n      formatter: (row, cell) => (\r\n        <p className=\"m-0\">\r\n          {cell?.isPrescriptionAdded ? \"Added\" : \"Not Added\"}\r\n        </p>\r\n      ),\r\n    },\r\n    {\r\n      dataField: \"paymentStatus\",\r\n      text: \"Payment Status\",\r\n      sort: false,\r\n      headerStyle: { backgroundColor: \"#F1F1F1\", width: \"14rem\" },\r\n      formatter: (row, cell) => (\r\n        <p\r\n          className={`mb-0 text-center py-1 w-75 ${\r\n            cell?.status === \"InActive\" ? \"inactive-status\" : \"active-status\"\r\n          }`}\r\n        >\r\n          {cell?.status === \"InActive\" ? \"Unpaid\" : \"Paid\"}\r\n        </p>\r\n      ),\r\n    },\r\n    {\r\n      dataField: \"action\",\r\n      text: \"Actions\",\r\n      sort: false,\r\n\r\n      formatter: (row, cell) => {\r\n        return (\r\n          <>\r\n            <Button\r\n              to={{\r\n                pathname: PATH.DOCTOR_PRESCRIPTION_FORM.replace(\r\n                  \":patientName\",\r\n                  `patientName=${cell?.patient.replace(/ /g, \"-\")}`\r\n                ),\r\n                search: `?patientId=${cell?.patientId}&formId=${cell?.formId}`,\r\n                state: {\r\n                  patientId: cell?.patientId,\r\n                  formId: cell?.formId,\r\n                },\r\n              }}\r\n              onClick={() => handleShowForm(cell)}\r\n              className=\"table-action bg-transparent border-0\"\r\n            >\r\n              <AiFillEye /> Details\r\n            </Button>\r\n          </>\r\n        );\r\n      },\r\n      headerStyle: { backgroundColor: \"#F1F1F1\" },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Card className=\"user-details-card doctor-datatable\">\r\n        <div className=\"mx-3 mt-3 d-flex justify-content-between custom-row align-items-center table-header-border\">\r\n          <SearchInput onChange={handleSearch} className=\"mb-3\" />\r\n        </div>\r\n\r\n        {isLoading ? (\r\n          <FullScreenLoader fullHeight={true} />\r\n        ) : isSuccess ? (\r\n          <span className=\"doctor-datatable\">\r\n            <DataTable\r\n              tableColumns={columns}\r\n              tableData={\r\n                getAllPatientOnlinePrescForm?.data\r\n                  ? getAllPatientOnlinePrescForm?.data\r\n                  : []\r\n              }\r\n              keyField=\"patientFormStatusId\"\r\n              pageNumber={pageNumber}\r\n              totalRecords={getAllPatientOnlinePrescForm?.totalCounts}\r\n              dataPerPage={pageSize}\r\n              handlePageChange={handlePageChange}\r\n              sort={{ dataField: \"patientFormStatusId\", order: \"desc\" }}\r\n            />\r\n          </span>\r\n        ) : isError ? (\r\n          <p className=\"my-5 text-center text-danger fst-italic\">\r\n            Network Error\r\n          </p>\r\n        ) : null}\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport AllPresForms from \"./AllPresForms\";\r\n\r\nexport default function PrescriptionStatus() {\r\n  const [key, setKey] = useState(null);\r\n  const [selectedFilter, setSelectedFilter] = useState(\"\");\r\n\r\n  const handleButtonClick = (value) => {\r\n    setKey(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"usermanagement-mainclass my-3\">\r\n      <div className=\"nav__custom-btn\">\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => {\r\n            handleButtonClick(null);\r\n            setSelectedFilter(true);\r\n          }}\r\n          className={`Admin-Tabs-All me-2 mb-2 ${\r\n            key === null ? \"nav-btn-active\" : \"nav-btn\"\r\n          }`}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => {\r\n            handleButtonClick(501);\r\n            setSelectedFilter(true);\r\n          }}\r\n          className={`Admin-Tabs-All me-2 mb-2 ${\r\n            key === 501 ? \"nav-btn-active\" : \"nav-btn\"\r\n          }`}\r\n        >\r\n          Pending\r\n        </Button>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => {\r\n            handleButtonClick(503);\r\n            setSelectedFilter(true);\r\n          }}\r\n          className={`Admin-Tabs-All me-2 mb-2 ${\r\n            key === 503 ? \"nav-btn-active\" : \"nav-btn\"\r\n          }`}\r\n        >\r\n          Completed\r\n        </Button>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => {\r\n            handleButtonClick(502);\r\n            setSelectedFilter(true);\r\n          }}\r\n          className={`Admin-Tabs-All me-2 mb-2 ${\r\n            key === 502 ? \"nav-btn-active\" : \"nav-btn\"\r\n          }`}\r\n        >\r\n          Rejected\r\n        </Button>\r\n      </div>\r\n      <AllPresForms\r\n        keyValue={key}\r\n        selectedFilter={selectedFilter}\r\n        setSelectedFilter={setSelectedFilter}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport PrescriptionStatus from \"./PrescriptionStatus\";\r\nimport { getAllFormCountData } from \"../../../app/features/PatientOnlinePrescription/PatientOnlinePrescription.slice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst CustomCard = ({ value, title, isLoading, isError, isSuccess }) => (\r\n  <Card className=\"h-100\">\r\n    <Card.Body className=\"d-flex align-items-center justify-content-center flex-column\">\r\n      {isSuccess ? (\r\n        <>\r\n          <h3 className=\"fw-bold\">{value}</h3>\r\n          <Card.Title className=\"m-0\">{title}</Card.Title>\r\n        </>\r\n      ) : isLoading ? (\r\n        <p\r\n          className=\"m-0 text-center fst-italic\"\r\n          style={{\r\n            color: \"#999999\",\r\n          }}\r\n        >\r\n          Loading...\r\n        </p>\r\n      ) : isError ? (\r\n        <p className=\"m-0 text-center text-danger fst-italic\">Network Error</p>\r\n      ) : null}\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n\r\nfunction OnlinePrescriptionDashboard() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { getAllFormCount, isLoading, isSuccess, isError } = useSelector(\r\n    (state) => state?.patientOnlinePresc\r\n  );\r\n\r\n  const cardData = [\r\n    { value: getAllFormCount?.data?.all, title: \"All\" },\r\n    { value: getAllFormCount?.data?.pending, title: \"Pending\" },\r\n    { value: getAllFormCount?.data?.completed, title: \"Completed\" },\r\n    { value: getAllFormCount?.data?.rejected, title: \"Rejected\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllFormCountData());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"doctor-prescription-dashbaord\">\r\n        {cardData.map((data, index) => (\r\n          <CustomCard\r\n            key={index}\r\n            {...data}\r\n            isLoading={isLoading}\r\n            isError={isError}\r\n            isSuccess={isSuccess}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <PrescriptionStatus />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OnlinePrescriptionDashboard;\r\n","import hasClass from './hasClass';\n/**\n * Adds a CSS class to a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","/**\n * Checks if a given element has a CSS class.\n * \n * @param element the element\n * @param className the CSS class name\n */\nexport default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}","function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n/**\n * Removes a CSS class from a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", {\n  ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["SearchInput","_ref","onChange","props","_jsxs","className","children","_jsx","Form","Control","type","placeholder","concat","BiSearch","size","DataTable","keyField","tableColumns","tableData","pageNumber","totalRecords","handlePageChange","dataPerPage","paginateOptions","paginationSize","pageStartIndex","alwaysShowAllBtns","withFirstAndLast","length","hideSizePerPage","showTotal","paginationTotalRenderer","customTotal","from","to","disablePageTitle","sizePerPageList","text","value","BootstrapTable","headerClasses","data","columns","pagination","paginationFactory","page","totalSize","onPageChange","noDataIndication","emptyDataMessage","remote","onTableChange","bordered","wrapperClasses","defaultProps","delay","arguments","undefined","searchValue","setSearchValue","useState","lastChange","useRef","useCallback","event","current","clearTimeout","setTimeout","target","AllPresForms","keyValue","selectedFilter","setSelectedFilter","setPageNumber","pageSize","useMemo","handleSearch","useDebouncedSearch","getAllPatientOnlinePrescForm","isError","isLoading","isSuccess","useSelector","state","patientOnlinePresc","dispatch","useDispatch","navigate","useNavigate","useEffect","finalData","PageNo","Size","isPagination","FormStatusId","Search","getAllPatientPresForm","dataField","headerStyle","backgroundColor","width","formatter","row","src","patient","alt","style","borderRadius","lineHeight","patientPharmacyEmail","color","patientPhone","cell","moment","format","isPrescriptionAdded","sort","status","_Fragment","Button","pathname","PATH","DOCTOR_PRESCRIPTION_FORM","replace","search","patientId","formId","onClick","handleShowForm","AiFillEye","Card","FullScreenLoader","fullHeight","totalCounts","sizePerPage","order","PrescriptionStatus","key","setKey","handleButtonClick","variant","CustomCard","title","Body","Title","_getAllFormCount$data","_getAllFormCount$data2","_getAllFormCount$data3","_getAllFormCount$data4","getAllFormCount","cardData","all","pending","completed","rejected","getAllFormCountData","map","index","addClass","element","classList","add","contains","baseVal","indexOf","hasClass","setAttribute","replaceClassName","origClass","classToRemove","RegExp","removeClass","remove","React","p","ref","classNames"],"sourceRoot":""}