{"version":3,"file":"static/js/3661.7a87f2d9.chunk.js","mappings":"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","sources":["components/LookupData/Data.jsx","pages/SuperAdmin/Forms/FormsData/Questionnaires.jsx"],"sourcesContent":["const ROLE_TYPE = [\r\n  {\r\n    lookupId: 6,\r\n    value: \"Nurse\",\r\n  },\r\n  {\r\n    lookupId: 7,\r\n    value: \"Receptionist\",\r\n  },\r\n];\r\nconst GENDER_TYPE = [\r\n  {\r\n    lookupId: 101,\r\n    value: \"Male\",\r\n  },\r\n  {\r\n    lookupId: 102,\r\n    value: \"Female\",\r\n  },\r\n  {\r\n    lookupId: 103,\r\n    value: \"Other\",\r\n  },\r\n];\r\n\r\nconst DEVICE_STATE = {\r\n  Destroyed: \"destroyed\",\r\n  Error: \"error\",\r\n  Incoming: \"incoming\",\r\n  Registered: \"registered\",\r\n  Registering: \"registering\",\r\n  TokenWillExpire: \"tokenWillExpire\",\r\n  Unregistered: \"unregistered\",\r\n};\r\n\r\nconst CALL_STATE = {\r\n  Connected: \"connected\",\r\n  Accept: \"accept\",\r\n  Audio: \"audio\",\r\n  Cancel: \"cancel\",\r\n  Disconnect: \"disconnect\",\r\n  Error: \"error\",\r\n  Mute: \"mute\",\r\n  Reconnected: \"reconnected\",\r\n  Reconnecting: \"reconnecting\",\r\n  Reject: \"reject\",\r\n  Ringing: \"ringing\",\r\n  Sample: \"sample\",\r\n  Volume: \"volume\",\r\n  WarningCleared: \"warning-cleared\",\r\n  Warning: \"warning\",\r\n};\r\n\r\nconst ANSWER_TYPE = [\r\n  {\r\n    lookupId: 401,\r\n    name: \"Multiple Choice\",\r\n    value: \"Radio\",\r\n  },\r\n  {\r\n    lookupId: 402,\r\n    name: \"Checkbox\",\r\n    value: \"Checkbox\",\r\n  },\r\n  {\r\n    lookupId: 404,\r\n    name: \"Paragraph\",\r\n    value: \"TextBox\",\r\n  },\r\n];\r\n\r\nconst DURATION_TYPE = [\r\n  {\r\n    lookupId: 801,\r\n    value: \"1 Month\",\r\n  },\r\n  {\r\n    lookupId: 802,\r\n    value: \"3 Months\",\r\n  },\r\n  {\r\n    lookupId: 803,\r\n    value: \"6 Months\",\r\n  },\r\n  {\r\n    lookupId: 804,\r\n    value: \"12 Months\",\r\n  },\r\n];\r\n\r\nexport default DEVICE_STATE;\r\n\r\nexport {\r\n  ROLE_TYPE,\r\n  GENDER_TYPE,\r\n  DEVICE_STATE,\r\n  CALL_STATE,\r\n  ANSWER_TYPE,\r\n  DURATION_TYPE,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Card, Col, Form, Row } from \"react-bootstrap\";\r\nimport { MdOutlineDeleteForever } from \"react-icons/md\";\r\nimport { FaPlus } from \"react-icons/fa6\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { PATH } from \"../../../../utils/path\";\r\nimport { ANSWER_TYPE } from \"../../../../components/LookupData/Data\";\r\nimport {\r\n  adminQuestionStatus,\r\n  adminRequiredStatus,\r\n  createAdminPresForm,\r\n  deleteAdminQuestion,\r\n  getAdminPresForm,\r\n  getAllAdminPresForm,\r\n} from \"../../../../app/features/OnlinePrescriptionForm/OnlinePrescriptionForm.slice\";\r\nimport FullScreenLoader from \"../../../../authorization/FullScreenLoader\";\r\n\r\nfunction Questionnaires() {\r\n  const { handleSubmit, setValue, register } = useForm();\r\n  const [selectedType, setSelectedType] = useState(\"401\");\r\n  const [sections, setSections] = useState([\r\n    {\r\n      questionId: \"\",\r\n      question: \"\",\r\n      options: [\"\"],\r\n      selectedType: \"401\",\r\n      isActive: true,\r\n      isRequired: true,\r\n    },\r\n  ]);\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const { adminOnlinePrescripionForm, isLoading, isError, isSuccess } =\r\n    useSelector((state) => state?.onlinePrescriptionForm);\r\n\r\n  console.log(\"adminOnlinePrescripionForm\", adminOnlinePrescripionForm);\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const user = JSON.parse(localStorage.getItem(\"family_doc_app\"));\r\n\r\n  const searchParams = new URLSearchParams(window.location.search);\r\n  let paramsData = searchParams.get(\"disease\");\r\n\r\n  const handleTypeChange = (e, index) => {\r\n    setSelectedType(e.target.value);\r\n    const updatedSections = [...sections];\r\n    updatedSections[index].selectedType = e.target.value;\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  const handleAddSection = () => {\r\n    setSections([\r\n      ...sections,\r\n      {\r\n        questionId: \"\",\r\n        question: \"\",\r\n        options: [\"\"],\r\n        selectedType: \"401\",\r\n        isActive: true,\r\n        isRequired: true,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleQuestionChange = (sectionIndex, value) => {\r\n    const updatedSections = [...sections];\r\n    updatedSections[sectionIndex].question = value;\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  const handleAddOption = (sectionIndex) => {\r\n    const updatedSections = [...sections];\r\n    updatedSections[sectionIndex].options = [\r\n      ...sections[sectionIndex].options,\r\n      \"\",\r\n    ];\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  // const handleOptionChange = (sectionIndex, optionIndex, value) => {\r\n  //   const updatedSections = [...sections];\r\n  //   updatedSections[sectionIndex].options[optionIndex] = value;\r\n  //   setSections(updatedSections);\r\n  // };\r\n\r\n  const handleOptionChange = (sectionIndex, optionIndex, value) => {\r\n    const updatedSections = [...sections];\r\n    updatedSections[sectionIndex] = {\r\n      ...updatedSections[sectionIndex],\r\n      options: updatedSections[sectionIndex].options.map((option, index) =>\r\n        index === optionIndex ? { ...option, answerLabel: value } : option\r\n      ),\r\n    };\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  // const handleCloseOption = (sectionIndex, optionIndex) => {\r\n  //   const updatedSections = [...sections];\r\n  //   updatedSections[sectionIndex].options.splice(optionIndex, 1);\r\n  //   setSections(updatedSections);\r\n  // };\r\n\r\n  const handleCloseOption = (sectionIndex, optionIndex) => {\r\n    const updatedSections = [...sections];\r\n    updatedSections[sectionIndex] = {\r\n      ...updatedSections[sectionIndex],\r\n      options: updatedSections[sectionIndex].options.filter(\r\n        (_, index) => index !== optionIndex\r\n      ),\r\n    };\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  const handleDeleteSection = (index) => {\r\n    const updatedSections = [...sections];\r\n    updatedSections.splice(index, 1);\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  // const handleSwitchChange = (sectionIndex, isChecked) => {\r\n  //   console.log(`Switch in section ${sectionIndex} is now ${isChecked}`);\r\n  // };\r\n\r\n  const handleSwitchChange = (sectionIndex, isChecked) => {\r\n    console.log(`Switch in section ${sectionIndex} is now ${isChecked}`);\r\n    const updatedSections = [...sections];\r\n    updatedSections[sectionIndex] = {\r\n      ...updatedSections[sectionIndex],\r\n      isActive: isChecked,\r\n    };\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  const handleRequiredChange = (sectionIndex, isChecked) => {\r\n    console.log(`Required in section ${sectionIndex} is now ${isChecked}`);\r\n    const updatedSections = [...sections];\r\n    updatedSections[sectionIndex] = {\r\n      ...updatedSections[sectionIndex],\r\n      isRequired: isChecked,\r\n    };\r\n    setSections(updatedSections);\r\n  };\r\n\r\n  function getPresForm() {\r\n    const finalData = {\r\n      formId: paramsData,\r\n    };\r\n    dispatch(getAdminPresForm(finalData));\r\n  }\r\n\r\n  function handleQuestionStatus(questionId) {\r\n    let finalData = {\r\n      questionId: questionId,\r\n    };\r\n    dispatch(adminQuestionStatus({ finalData, getPresForm }));\r\n  }\r\n\r\n  function handleRequiredStatus(questionId) {\r\n    let finalData = {\r\n      questionId: questionId,\r\n    };\r\n    dispatch(adminRequiredStatus({ finalData, getPresForm }));\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    const finalData = {\r\n      formId: paramsData,\r\n    };\r\n    dispatch(getAdminPresForm(finalData));\r\n  }, [dispatch, paramsData]);\r\n\r\n  useEffect(() => {\r\n    if (paramsData && adminOnlinePrescripionForm) {\r\n      setSections([]);\r\n      adminOnlinePrescripionForm?.data?.formQuestionList?.map(\r\n        (section, sectionIndex) => {\r\n          const newSection = {\r\n            title: adminOnlinePrescripionForm?.data?.title,\r\n            questionId: section.questionId,\r\n            question: section.question,\r\n            options: section.formAnswersList,\r\n            selectedType: section.answerTypeId.toString(),\r\n            isActive: section.isActive,\r\n            isRequired: section.isRequired,\r\n          };\r\n          return setSections((prevSections) => [...prevSections, newSection]);\r\n        }\r\n      );\r\n    }\r\n  }, [paramsData, adminOnlinePrescripionForm]);\r\n\r\n  function deleteQuestion(questionId) {\r\n    let finalData = {\r\n      questionId: questionId,\r\n    };\r\n    dispatch(deleteAdminQuestion({ finalData, getPresForm }));\r\n  }\r\n\r\n  function onCreateSuccess() {\r\n    if (user?.roleId === 1) {\r\n      navigate(PATH.SUPERADMIN_FORMS);\r\n    } else if (user?.roleId === 4) {\r\n      navigate(PATH.ADMIN_FORMS);\r\n    }\r\n\r\n    let finalData = {\r\n      Search: \"\",\r\n    };\r\n    dispatch(getAllAdminPresForm(finalData));\r\n  }\r\n\r\n  function createOnlinePresForm(submittedData) {\r\n    const finalData = {\r\n      formId: paramsData ? adminOnlinePrescripionForm?.data?.formId : 0,\r\n      title: submittedData?.title\r\n        ? submittedData?.title\r\n        : adminOnlinePrescripionForm?.data?.title,\r\n      isActive: paramsData ? adminOnlinePrescripionForm?.data?.isActive : true,\r\n      formQuestionList: sections.map((value, index) => ({\r\n        questionId: value?.questionId ? value?.questionId : 0,\r\n        question: value?.question,\r\n        answerTypeId: value?.selectedType,\r\n        questionOrder: index,\r\n        isActive: value?.isActive,\r\n        isRequired: value?.isRequired,\r\n        answerTypeName:\r\n          value?.selectedType === \"401\"\r\n            ? \"Radio\"\r\n            : value?.selectedType === \"402\"\r\n            ? \"Checkbox\"\r\n            : value?.selectedType === \"404\"\r\n            ? \"TextBox\"\r\n            : \"\",\r\n        formId: paramsData ? adminOnlinePrescripionForm?.data?.formId : 0,\r\n        formAnswersList: value.options.map((value, index) => ({\r\n          formAnswereId: value?.formAnswereId ? value?.formAnswereId : 0,\r\n          formQuestionId: value?.formQuestionId ? value?.formQuestionId : 0,\r\n          answerLabel: value?.answerLabel ? value?.answerLabel : \"Answer Text\",\r\n        })),\r\n      })),\r\n    };\r\n    dispatch(createAdminPresForm({ finalData, onCreateSuccess }));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h5>Questionnaires</h5>\r\n      <Card className=\"shadow-sm custom-questionnaires\">\r\n        {isSuccess ? (\r\n          <Form onSubmit={handleSubmit(createOnlinePresForm)}>\r\n            <Row className=\"m-3 d-flex justify-content-center flex-column\">\r\n              <Col xl={7} lg={10} xs={12} className=\"mx-auto mb-3 p-0\">\r\n                <Form.Group\r\n                  className=\"px-3 pt-2 pb-4 rounded mb-3\"\r\n                  controlId=\"formTitle\"\r\n                  style={{\r\n                    boxShadow: \"0px 0px 24px 0px #0000000A\",\r\n                    borderTop: \"6px solid #000071\",\r\n                  }}\r\n                >\r\n                  <Form.Label className=\"mt-2 fw-bold\">\r\n                    {editing ? \"Enter \" : \"\"}Form Title\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"bg-transparent\"\r\n                    placeholder=\"Form Title\"\r\n                    maxLength={250}\r\n                    // {...register(\"title\", { required: true })}\r\n                    name=\"title\"\r\n                    onChange={(e) => setValue(\"title\", e.target.value)}\r\n                    disabled={paramsData && !editing}\r\n                    defaultValue={adminOnlinePrescripionForm?.data?.title}\r\n                  />\r\n                </Form.Group>\r\n                {sections?.length === 0 ? (\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    type=\"button\"\r\n                    className=\"Admin-Add-btn px-3 float-end\"\r\n                    onClick={handleAddSection}\r\n                  >\r\n                    <FaPlus size={24} />\r\n                  </Button>\r\n                ) : paramsData && !editing ? (\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    type=\"button\"\r\n                    className=\"Admin-Add-btn px-3 float-end\"\r\n                    onClick={() => {\r\n                      setEditing(true);\r\n                    }}\r\n                  >\r\n                    <BiEdit size={24} /> Edit\r\n                  </Button>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </Col>\r\n              {sections.map((section, sectionIndex) => (\r\n                <Col\r\n                  key={sectionIndex}\r\n                  xl={7}\r\n                  lg={10}\r\n                  xs={12}\r\n                  className=\"p-3 rounded mx-auto mb-3\"\r\n                  style={{\r\n                    boxShadow: \"0px 0px 24px 0px #0000000A\",\r\n                    borderLeft: \"6px solid #F26522\",\r\n                  }}\r\n                >\r\n                  <Form.Group\r\n                    className=\"mb-3\"\r\n                    // controlId={`formQuestion${sectionIndex}`}\r\n                  >\r\n                    {(!paramsData || editing) && (\r\n                      <div className=\"d-flex justify-content-between flex-wrap align-items-center custom-col-rev mb-2\">\r\n                        <Form.Label className=\"text-w-full mb-0\">\r\n                          Q.{`${sectionIndex + 1}.`} Enter Question\r\n                        </Form.Label>\r\n                        <Col xl={5} sm={6} xs={12}>\r\n                          <Form.Select\r\n                            aria-label=\"Select Type\"\r\n                            onChange={(e) => {\r\n                              handleTypeChange(e, sectionIndex);\r\n                            }}\r\n                            defaultValue={section?.selectedType || selectedType}\r\n                            disabled={paramsData && section?.questionId}\r\n                            className=\"bg-transparent\"\r\n                          >\r\n                            {ANSWER_TYPE.map((type) => {\r\n                              return (\r\n                                <option value={type?.lookupId}>\r\n                                  {type.name}\r\n                                </option>\r\n                              );\r\n                            })}\r\n                          </Form.Select>\r\n                        </Col>\r\n                      </div>\r\n                   \r\n                    )}\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      placeholder=\"Question\"\r\n                      maxLength={250}\r\n                      defaultValue={section?.question}\r\n                      // Set the value of the input\r\n                      // value={section.question}\r\n\r\n                      disabled={paramsData && !editing}\r\n                      // {...register(`questionText${sectionIndex}`, {\r\n                      //   required: true,\r\n                      // })}\r\n                      name={`questionText${sectionIndex}`}\r\n                      required={true}\r\n                      onChange={(e) =>\r\n                        handleQuestionChange(sectionIndex, e.target.value)\r\n                      }\r\n                      className=\"bg-transparent\"\r\n                    />\r\n                    <div className=\"mt-2 questionnaires-option\">\r\n                      {section?.selectedType === \"401\" && (\r\n                        <>\r\n                          {section.options.map((option, optionIndex) => (\r\n                            <div\r\n                              className=\"d-flex align-items-center\"\r\n                              key={`radio-${optionIndex}`}\r\n                            >\r\n                              <Form.Check\r\n                                label={\r\n                                  <>\r\n                                    <Form.Control\r\n                                      type=\"text\"\r\n                                      placeholder=\"Add option\"\r\n                                      className=\"border-0 ms-2 bg-transparent\"\r\n                                      defaultValue={option.answerLabel}\r\n                                      disabled={paramsData && !editing}\r\n                                      onChange={(e) =>\r\n                                        handleOptionChange(\r\n                                          sectionIndex,\r\n                                          optionIndex,\r\n                                          e.target.value\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                  </>\r\n                                }\r\n                                name={`group${sectionIndex}`}\r\n                                type=\"radio\"\r\n                                id={`radio-${optionIndex}`}\r\n                                className=\"d-flex align-items-center mb-1 w-100\"\r\n                                disabled\r\n                              />\r\n                              {!paramsData && (\r\n                                <span className=\"mx-3\">\r\n                                  <AiOutlineClose\r\n                                    size={18}\r\n                                    onClick={() =>\r\n                                      handleCloseOption(\r\n                                        sectionIndex,\r\n                                        optionIndex\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          ))}\r\n                          {(!paramsData || !section?.questionId) && (\r\n                            <span\r\n                              className=\"text-cursor-pointer text-decoration-underline\"\r\n                              style={{ color: \"#3F8BFC\", fontSize: \"0.9em\" }}\r\n                              onClick={() => handleAddOption(sectionIndex)}\r\n                            >\r\n                              Add another option\r\n                            </span>\r\n                          )}\r\n                        </>\r\n                      )}\r\n                      {section?.selectedType === \"404\" && (\r\n                        <>\r\n                          <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={3}\r\n                            placeholder=\"Answer Text\"\r\n                            className=\"mt-2\"\r\n                            disabled={true}\r\n                          />\r\n                        </>\r\n                      )}\r\n                      {section?.selectedType === \"402\" && (\r\n                        <>\r\n                          {section.options.map((option, optionIndex) => (\r\n                            <div\r\n                              key={`checkbox-${optionIndex}`}\r\n                              className=\"d-flex align-items-center\"\r\n                            >\r\n                              <Form.Check\r\n                                label={\r\n                                  <>\r\n                                    <Form.Control\r\n                                      type=\"text\"\r\n                                      placeholder=\"Add option\"\r\n                                      className=\"border-0 ms-2 bg-transparent\"\r\n                                      defaultValue={option.answerLabel}\r\n                                      disabled={paramsData && !editing}\r\n                                      onChange={(e) =>\r\n                                        handleOptionChange(\r\n                                          sectionIndex,\r\n                                          optionIndex,\r\n                                          e.target.value\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                  </>\r\n                                }\r\n                                name={`group${sectionIndex}`}\r\n                                type=\"checkbox\"\r\n                                id={`checkbox-${optionIndex}`}\r\n                                className=\"d-flex align-items-center mb-1 w-100\"\r\n                                disabled\r\n                              />\r\n                              {!paramsData && (\r\n                                <span className=\"mx-3\">\r\n                                  <AiOutlineClose\r\n                                    size={18}\r\n                                    onClick={() =>\r\n                                      handleCloseOption(\r\n                                        sectionIndex,\r\n                                        optionIndex\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          ))}\r\n                          {(!paramsData || !section?.questionId) && (\r\n                            <span\r\n                              className=\"text-cursor-pointer text-decoration-underline\"\r\n                              style={{ color: \"#3F8BFC\", fontSize: \"0.9em\" }}\r\n                              onClick={() => handleAddOption(sectionIndex)}\r\n                            >\r\n                              Add another option\r\n                            </span>\r\n                          )}\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </Form.Group>\r\n                  <div className=\"w-100 d-flex flex-wrap justify-content-end\">\r\n                    {(!paramsData || (paramsData && editing)) && (\r\n                      <>\r\n                        <span style={{ borderRight: \"1px solid #CACACA\" }}>\r\n                          <FaPlus\r\n                            size={24}\r\n                            color=\"#CACACA\"\r\n                            className=\"mx-2 text-cursor-pointer\"\r\n                            data-toggle=\"tooltip\"\r\n                            data-placement=\"top\"\r\n                            title=\"Add Question\"\r\n                            onClick={handleAddSection}\r\n                          />\r\n                        </span>\r\n                        <span\r\n                          className=\"me-2\"\r\n                          style={{ borderRight: \"1px solid #CACACA\" }}\r\n                        >\r\n                          <MdOutlineDeleteForever\r\n                            size={26}\r\n                            color=\"#CACACA\"\r\n                            className=\"mx-2 text-cursor-pointer\"\r\n                            data-toggle=\"tooltip\"\r\n                            data-placement=\"top\"\r\n                            title=\"Delete\"\r\n                            // onClick={() => handleDeleteSection(sectionIndex)}\r\n                            onClick={() => {\r\n                              if (\r\n                                paramsData &&\r\n                                editing &&\r\n                                section?.questionId\r\n                              ) {\r\n                                const questionId =\r\n                                  section.options[sectionIndex]?.formQuestionId;\r\n                                deleteQuestion(questionId);\r\n                              } else {\r\n                                handleDeleteSection(sectionIndex);\r\n                              }\r\n                            }}\r\n                          />\r\n                        </span>\r\n                      </>\r\n                    )}\r\n                    <Form.Check\r\n                      type=\"switch\"\r\n                      id={`custom-switch-${sectionIndex}`}\r\n                      label=\"Active\"\r\n                      {...register(\"isActive\")}\r\n                      checked={section?.isActive === false ? false : true}\r\n                      onChange={(e) => {\r\n                        if (paramsData && editing && section?.questionId) {\r\n                          const questionId = section.questionId;\r\n                          handleQuestionStatus(questionId);\r\n                        } else {\r\n                          handleSwitchChange(sectionIndex, e.target.checked);\r\n                        }\r\n                      }}\r\n                      disabled={paramsData && !editing}\r\n                      className=\"me-2\"\r\n                    />\r\n                    <Form.Check\r\n                      type=\"switch\"\r\n                      id={`required-switch-${sectionIndex}`}\r\n                      label=\"Required\"\r\n                      {...register(\"isRequired\")}\r\n                      checked={section?.isRequired === false ? false : true}\r\n                      onChange={(e) => {\r\n                        if (paramsData && editing && section?.questionId) {\r\n                          const questionId = section.questionId;\r\n                          handleRequiredStatus(questionId);\r\n                        } else {\r\n                          handleRequiredChange(sectionIndex, e.target.checked);\r\n                        }\r\n                      }}\r\n                      disabled={paramsData && !editing}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n              ))}\r\n              {((sections?.length !== 0 && !paramsData) ||\r\n                (paramsData && editing)) && (\r\n                <Col>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    type=\"submit\"\r\n                    className=\"Admin-Add-btn fw-bold float-end\"\r\n                  >\r\n                    Save\r\n                  </Button>\r\n                </Col>\r\n              )}\r\n            </Row>\r\n          </Form>\r\n        ) : isLoading ? (\r\n          <FullScreenLoader />\r\n        ) : isError ? (\r\n          <p className=\"text-center mt-3\">Network Error...</p>\r\n        ) : null}\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Questionnaires;\r\n"],"names":["ROLE_TYPE","lookupId","value","GENDER_TYPE","DEVICE_STATE","Destroyed","Error","Incoming","Registered","Registering","TokenWillExpire","Unregistered","CALL_STATE","Connected","Accept","Audio","Cancel","Disconnect","Mute","Reconnected","Reconnecting","Reject","Ringing","Sample","Volume","WarningCleared","Warning","ANSWER_TYPE","name","DURATION_TYPE","_adminOnlinePrescripi8","handleSubmit","setValue","register","useForm","selectedType","setSelectedType","useState","sections","setSections","questionId","question","options","isActive","isRequired","editing","setEditing","adminOnlinePrescripionForm","isLoading","isError","isSuccess","useSelector","state","onlinePrescriptionForm","console","log","navigate","useNavigate","dispatch","useDispatch","user","JSON","parse","localStorage","getItem","paramsData","URLSearchParams","window","location","search","get","handleAddSection","handleAddOption","sectionIndex","updatedSections","handleOptionChange","optionIndex","map","option","index","answerLabel","handleCloseOption","filter","_","getPresForm","finalData","formId","getAdminPresForm","onCreateSuccess","roleId","PATH","SUPERADMIN_FORMS","ADMIN_FORMS","getAllAdminPresForm","Search","useEffect","_adminOnlinePrescripi","_adminOnlinePrescripi2","data","formQuestionList","section","_adminOnlinePrescripi3","newSection","title","formAnswersList","answerTypeId","toString","prevSections","_jsxs","_Fragment","children","_jsx","Card","className","Form","onSubmit","submittedData","_adminOnlinePrescripi4","_adminOnlinePrescripi5","_adminOnlinePrescripi6","_adminOnlinePrescripi7","questionOrder","answerTypeName","formAnswereId","formQuestionId","createAdminPresForm","Row","Col","xl","lg","xs","Group","controlId","style","boxShadow","borderTop","Label","Control","type","placeholder","maxLength","onChange","e","target","disabled","defaultValue","length","Button","variant","onClick","FaPlus","size","BiEdit","borderLeft","concat","sm","Select","handleTypeChange","required","handleQuestionChange","Check","label","id","AiOutlineClose","color","fontSize","as","rows","borderRight","MdOutlineDeleteForever","_section$options$sect","deleteAdminQuestion","deleteQuestion","splice","handleDeleteSection","checked","adminQuestionStatus","handleQuestionStatus","handleSwitchChange","isChecked","adminRequiredStatus","handleRequiredStatus","handleRequiredChange","FullScreenLoader"],"sourceRoot":""}