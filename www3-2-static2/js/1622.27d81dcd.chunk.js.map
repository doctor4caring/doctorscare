{"version":3,"file":"static/js/1622.27d81dcd.chunk.js","mappings":"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","sources":["components/ErrorMessage/ErrorMessage.jsx","components/GenericDatePicker/index.jsx","components/Modal/FormModal.jsx","pages/Doctor/Slots/Component/RecurringSlot.jsx","pages/Doctor/Slots/Component/SingleDaySlot.jsx","pages/Doctor/Slots/AddNewSlot.jsx","pages/Doctor/Slots/Slots.jsx"],"sourcesContent":["import { ERROR } from \"../../utils/path\";\r\n\r\nexport function FieldError(props) {\r\n  return (\r\n    <div className=\"error-message-field-generic\">\r\n      <p className=\"my-1\">{props.message ? props.message : ERROR.SYSTEM_ERROR}</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport { BsCalendarFill } from \"react-icons/bs\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst GenericDatePicker = ({\r\n  selectedDateState,\r\n  onChange,\r\n  dateFormat = \"dd MMM yyyy\",\r\n  placeholderText = \"Date\",\r\n  className = \"\",\r\n  datePickerClassName = \"custom-field-picker px-2\",\r\n  useDrDateClass = true,\r\n  ...props\r\n}) => {\r\n  console.log(\"disabled\", props);\r\n  return (\r\n    <div className={`custom__date-input position-relative d-flex mb-3 ${className}`} {...props}>\r\n      <ReactDatePicker\r\n        selected={selectedDateState}\r\n        onChange={onChange}\r\n        dateFormat={dateFormat}\r\n        placeholderText={placeholderText}\r\n        className={`${datePickerClassName} ${\r\n          useDrDateClass ? \"dr-date-w\" : \"w-100\"\r\n        }`}\r\n        disabled={props?.disabled}\r\n        minDate={props?.mindate}\r\n      />\r\n      <BsCalendarFill size={18} className=\"custom__date_icon\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GenericDatePicker;\r\n","import { Modal } from \"react-bootstrap\";\r\n\r\nexport default function FormModal({ children, ...rest }) {\r\n  const { handleClose, show, title, className } = rest;\r\n  return (\r\n    <div>\r\n      <Modal show={show} onHide={handleClose} className={className} backdrop=\"static\">\r\n        <Modal.Header className=\"py-3\" closeButton>\r\n          <Modal.Title className=\"modalTitle\">\r\n            <span className=\"font-weight-600\">{title}</span>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>{children}</Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Button, Col, Form, FormLabel, Row } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport moment from \"moment\";\r\nimport { convertTimeIntoUTC } from \"../../../../components/GenericActions\";\r\nimport {\r\n  createDoctorSchedule,\r\n  getAllSlots,\r\n} from \"../../../../app/features/doctorSchedule/doctorSchedule.slice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FieldError } from \"../../../../components/ErrorMessage/ErrorMessage\";\r\nimport GenericDatePicker from \"../../../../components/GenericDatePicker\";\r\n\r\nfunction RecurringSlot(props) {\r\n  const { handleClose } = props;\r\n  const { handleSubmit, register } = useForm();\r\n\r\n  const [startDate1, setStartDate1] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n  const [startTimeRecurring, setStartTimeRecurring] = useState(\"\");\r\n  const [endTimeRecurring, setEndTimeRecurring] = useState(\"\");\r\n  const [weekDays, setWeekDays] = useState([]);\r\n  const [validationMessage, setValidationMessage] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  const handleStartDateChange1 = (dateValue) => {\r\n    const selectedDate = dateValue;\r\n    setStartDate1(selectedDate);\r\n    // setStartTimeRecurring(getCurrentTime());\r\n\r\n    // Calculate the minimum end date\r\n    const minEndDate = new Date(selectedDate);\r\n    // minEndDate.setDate(minEndDate.getDate()); // Add one day to start date\r\n    // const minEndDateStr = minEndDate.toISOString().split(\"T\")[0]; // Format as YYYY-MM-DD\r\n\r\n    const minEndDateStr = moment(minEndDate).format(\"YYYY-MM-DD\"); // Format as YYYY-MM-DD\r\n    const endDateStr = moment(endDate).format(\"YYYY-MM-DD\"); // Format as YYYY-MM-DD\r\n\r\n    // Update the end date if it's before the minimum end date\r\n    if (endDateStr < minEndDateStr) {\r\n      setEndDate(new Date(minEndDateStr));\r\n    }\r\n  };\r\n\r\n  const { allSlots } = useSelector((state) => state.doctorSchedule);\r\n  const filteredSlots = allSlots?.filter((slot) => !slot.isBooked);\r\n  const startTimes = filteredSlots?.map((slot) => slot.startTime);\r\n  const endTimes = filteredSlots?.map((slot) => slot.endTime);\r\n\r\n  const extractedData = allSlots?.map((slot) => ({\r\n    scheduleId: slot.scheduleId,\r\n    Fee: slot.Fee,\r\n  }));\r\n  const handleCheckboxChange = (e) => {\r\n    const { value, checked } = e.target;\r\n\r\n    if (checked) {\r\n      // Add the value to the array\r\n      setWeekDays((prevWeekDays) => [...prevWeekDays, value]);\r\n    } else {\r\n      // Remove the value from the array\r\n      setWeekDays((prevWeekDays) =>\r\n        prevWeekDays.filter((day) => day !== value)\r\n      );\r\n    }\r\n  };\r\n  const moveToNext = () => {\r\n    const standardISODate = moment(startDate1).format(\"YYYY-MM-DD\");\r\n    handleClose();\r\n    const finalData = {\r\n      date: standardISODate,\r\n      month: null,\r\n    };\r\n    dispatch(getAllSlots(finalData));\r\n  };\r\n  function onSubmit(data) {\r\n    const standardISODate = moment(startDate1).format(\"YYYY-MM-DD\");\r\n    const standardISOEndDate = moment(endDate).format(\"YYYY-MM-DD\");\r\n\r\n    const finalData = {\r\n      startDate: standardISODate,\r\n      endDate: standardISOEndDate,\r\n      startTime: convertTimeIntoUTC(startTimeRecurring, standardISODate)?.split(\r\n        \"Z\"\r\n      )[0],\r\n      endTime: convertTimeIntoUTC(endTimeRecurring, standardISODate)?.split(\r\n        \"Z\"\r\n      )[0],\r\n      noOfDoctors: 1,\r\n      daysOfWeek: weekDays,\r\n      fee: data?.feeValue,\r\n    };\r\n    dispatch(createDoctorSchedule({ finalData, moveToNext }));\r\n  }\r\n\r\n  const handleEndTimeChange = (e) => {\r\n    const selectedEndTime = e.target.value;\r\n    setEndTimeRecurring(selectedEndTime);\r\n\r\n    // Check if the time difference is less than 15 minutes\r\n    const isValidTimeDifference = validateTimeDifference(\r\n      startTimeRecurring,\r\n      selectedEndTime\r\n    );\r\n\r\n    if (!isValidTimeDifference) {\r\n      setValidationMessage(\r\n        \"The appointment start time and end time should be at least 15 minutes apart.\"\r\n      );\r\n    } else {\r\n      setValidationMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const validateTimeDifference = (start, end) => {\r\n    const standardISODate = moment(startDate1).format(\"YYYY-MM-DD\");\r\n    const startTime = new Date(`${standardISODate} ${start}`);\r\n    const endTime = new Date(`${standardISODate} ${end}`);\r\n    let timeDifference = (endTime - startTime) / (1000 * 60); // in minutes\r\n\r\n    // Adjust for negative time difference (crossing over to the next day)\r\n    if (timeDifference < 0) {\r\n      timeDifference += 24 * 60; // add 24 hours in minutes\r\n    }\r\n\r\n    return timeDifference >= 15;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <div key=\"0\" className=\"mb-3 border p-3 rounded modalCheckboxes\">\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            id=\"\"\r\n            label=\"Monday\"\r\n            className=\"d-flex\"\r\n            value=\"Monday\"\r\n            onChange={handleCheckboxChange}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            id=\"\"\r\n            label=\"Tuesday\"\r\n            className=\"d-flex\"\r\n            value=\"Tuesday\"\r\n            onChange={handleCheckboxChange}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            id=\"\"\r\n            label=\"Wednesday\"\r\n            className=\"d-flex\"\r\n            value=\"Wednesday\"\r\n            onChange={handleCheckboxChange}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            id=\"\"\r\n            label=\"Thursday\"\r\n            className=\"d-flex\"\r\n            value=\"Thursday\"\r\n            onChange={handleCheckboxChange}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            id=\"\"\r\n            label=\"Friday\"\r\n            className=\"d-flex\"\r\n            value=\"Friday\"\r\n            onChange={handleCheckboxChange}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            id=\"\"\r\n            label=\"Saturday\"\r\n            className=\"d-flex\"\r\n            value=\"Saturday\"\r\n            onChange={handleCheckboxChange}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            id=\"\"\r\n            label=\"Sunday\"\r\n            className=\"d-flex\"\r\n            value=\"Sunday\"\r\n            onChange={handleCheckboxChange}\r\n          />\r\n        </div>\r\n\r\n        <Row>\r\n          <Col md={6} xl={6}>\r\n            <div className=\"mb-3\">\r\n              <label className=\"fw-semibold fs-6\">Start Date</label>\r\n              <GenericDatePicker\r\n                selectedDateState={startDate1}\r\n                onChange={handleStartDateChange1}\r\n                useDrDateClass={false}\r\n                dateFormat=\"dd/MM/yyyy\"\r\n                placeholderText=\"day/month/year\"\r\n                mindate={new Date()}\r\n              />\r\n            </div>\r\n            <Form.Group controlId=\"start-timeId\" className=\"mb-3\">\r\n              <FormLabel className=\"fw-semibold fs-6\">Start Time</FormLabel>\r\n              <Form.Control\r\n                type=\"time\"\r\n                placeholder=\"HH:MM\"\r\n                className=\"custom-date\"\r\n                // min={getCurrentTime()}\r\n                disabled={!moment(startDate1).format(\"YYYY-MM-DD\")}\r\n                // disabled={!startDate1 || startTimes[0]}\r\n                value={\r\n                  startTimeRecurring ? startTimeRecurring : startTimes?.[0]\r\n                }\r\n                onChange={(e) => setStartTimeRecurring(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col md={6} xl={6}>\r\n            <div className=\"mb-3\">\r\n              <label className=\"fw-semibold fs-6\">End Date</label>\r\n              <GenericDatePicker\r\n                selectedDateState={endDate}\r\n                onChange={(dateValue) => setEndDate(dateValue)}\r\n                useDrDateClass={false}\r\n                dateFormat=\"dd/MM/yyyy\"\r\n                placeholderText=\"day/month/year\"\r\n                mindate={new Date(startDate1)}\r\n                disabled={!startDate1}\r\n              />\r\n            </div>\r\n\r\n            <Form.Group controlId=\"end-timeId\" className=\"mb-3\">\r\n              <FormLabel className=\"fw-semibold fs-6\">End Time</FormLabel>\r\n              <Form.Control\r\n                type=\"time\"\r\n                placeholder=\"HH:MM\"\r\n                className=\"custom-date\"\r\n                min={startTimeRecurring}\r\n                value={endTimeRecurring ? endTimeRecurring : endTimes?.[1]}\r\n                disabled={!startTimeRecurring}\r\n                // disabled={!startTimeRecurring || endTimes[1]}\r\n                onChange={handleEndTimeChange}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n          {validationMessage && <FieldError message={validationMessage} />}\r\n          <Col md={6} xl={6}>\r\n            <Form.Group controlId=\"fee\">\r\n              <Form.Label className=\"fw-bold\">Fee (€)</Form.Label>\r\n              <Form.Control\r\n                size=\"lg\"\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                placeholder=\"Enter Fee (1.36)\"\r\n                min={0}\r\n                {...register(\"feeValue\", { required: true })}\r\n                defaultValue={\r\n                  extractedData?.length > 0 ? extractedData[0].Fee : \"\"\r\n                }\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n\r\n          <div className=\"d-grid mt-4\">\r\n            <Button\r\n              className=\"block primary_bg\"\r\n              variant=\"primary\"\r\n              size=\"lg\"\r\n              type=\"submit\"\r\n              disabled={validationMessage}\r\n            >\r\n              Create Slot\r\n            </Button>\r\n          </div>\r\n        </Row>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RecurringSlot;\r\n","import { useState } from \"react\";\r\nimport { Button, Col, Form, FormLabel, Row } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport {\r\n  createDoctorSchedule,\r\n  getAllSlots,\r\n} from \"../../../../app/features/doctorSchedule/doctorSchedule.slice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  convertTimeIntoUTC,\r\n  getCurrentDate,\r\n  getCurrentTime,\r\n} from \"../../../../components/GenericActions\";\r\nimport { FieldError } from \"../../../../components/ErrorMessage/ErrorMessage\";\r\nimport moment from \"moment\";\r\nimport GenericDatePicker from \"../../../../components/GenericDatePicker\";\r\n\r\nfunction SingleDaySlot(props) {\r\n  const { handleClose } = props;\r\n\r\n  const { handleSubmit, register } = useForm();\r\n  const [endTime, setEndTime] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(null); //1\r\n  const [startTime, setStartTime] = useState(\"\");\r\n  const [validationMessage, setValidationMessage] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  const { allSlots } = useSelector((state) => state.doctorSchedule);\r\n\r\n  const filteredSlots = allSlots?.filter((slot) => !slot.isBooked);\r\n  const startTimes = filteredSlots?.map((slot) => slot.startTime);\r\n  const endTimes = filteredSlots?.map((slot) => slot.endTime);\r\n\r\n  const extractedData = allSlots?.map((slot) => ({\r\n    scheduleId: slot.scheduleId,\r\n    Fee: slot.Fee,\r\n  }));\r\n\r\n  const handleStartDateChange = (dateValue) => {\r\n    const selectedDate = dateValue;\r\n    setStartDate(selectedDate);\r\n    setStartTime(getCurrentTime());\r\n    setEndTime(endTimes[1]);\r\n  };\r\n  \r\n  function getDayName(date = startDate, locale = \"en-US\") {\r\n    return date?.toLocaleDateString(locale, { weekday: \"long\" });\r\n  }\r\n  const dayNamesArray = [];\r\n  dayNamesArray.push(getDayName());\r\n\r\n  const moveToNext = () => {\r\n    const standardISODate = moment(startDate).format(\"YYYY-MM-DD\");\r\n    handleClose();\r\n    const finalData = {\r\n      date: standardISODate,\r\n      month: null,\r\n    };\r\n    dispatch(getAllSlots(finalData));\r\n  };\r\n\r\n  function onSubmit(data) {\r\n    const standardISODate = moment(startDate).format(\"YYYY-MM-DD\");\r\n\r\n    const finalData = {\r\n      startDate: standardISODate,\r\n      endDate: standardISODate,\r\n      startTime: convertTimeIntoUTC(startTime, standardISODate)?.split(\"Z\")[0],\r\n      endTime: convertTimeIntoUTC(endTime, standardISODate)?.split(\"Z\")[0],\r\n      noOfDoctors: 1,\r\n      daysOfWeek: dayNamesArray,\r\n      fee: data?.feeValue,\r\n    };\r\n    dispatch(createDoctorSchedule({ finalData, moveToNext }));\r\n  }\r\n\r\n  //   const dateForPicker = (dateString) => {\r\n  //     return moment(new Date(dateString)).format('YYYY-MM-DD')\r\n  // };\r\n\r\n  const handleEndTimeChange = (e) => {\r\n    const selectedEndTime = e.target.value;\r\n    setEndTime(selectedEndTime);\r\n\r\n    // Check if the time difference is less than 15 minutes\r\n    const isValidTimeDifference = validateTimeDifference(\r\n      startTime,\r\n      selectedEndTime\r\n    );\r\n\r\n    if (!isValidTimeDifference) {\r\n      setValidationMessage(\r\n        \"The appointment start time and end time should be at least 15 minutes apart.\"\r\n      );\r\n    } else {\r\n      setValidationMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const validateTimeDifference = (start, end) => {\r\n    const standardISODate = moment(startDate).format(\"YYYY-MM-DD\");\r\n\r\n    const startTime = new Date(`${standardISODate} ${start}`);\r\n    const endTime = new Date(`${standardISODate} ${end}`);\r\n    let timeDifference = (endTime - startTime) / (1000 * 60); // in minutes\r\n\r\n    // Adjust for negative time difference (crossing over to the next day)\r\n    if (timeDifference < 0) {\r\n      timeDifference += 24 * 60; // add 24 hours in minutes\r\n    }\r\n\r\n    return timeDifference >= 15;\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit(onSubmit)}>\r\n      <Row>\r\n        <Col xl={12}>\r\n          <label className=\"fw-semibold fs-6\">Date</label>\r\n          <GenericDatePicker\r\n            selectedDateState={startDate}\r\n            onChange={handleStartDateChange}\r\n            useDrDateClass={false}\r\n            dateFormat=\"dd/MM/yyyy\"\r\n            placeholderText=\"day/month/year\"\r\n            mindate={new Date()}\r\n          />\r\n          {/* <Form.Group controlId=\"formDate\" className=\"mb-3\">\r\n          \r\n\r\n            <FormLabel className=\"fw-semibold fs-6\">Date</FormLabel>\r\n            <Form.Control\r\n              type=\"date\"\r\n              name=\"date\"\r\n              placeholder={startDate ? dateForPicker(startDate) : \"dd/mm/yyyy\"}\r\n              className=\"custom-date\"\r\n              value={startDate}\r\n              min={getCurrentDate()}\r\n              onChange={(date) => handleStartDateChange(date)}\r\n            />\r\n          </Form.Group> */}\r\n        </Col>\r\n        <Col md={6} xl={6}>\r\n          <Form.Group controlId=\"start-timeId\" className=\"mb-3\">\r\n            <FormLabel className=\"fw-semibold fs-6\">Start Time</FormLabel>\r\n            <Form.Control\r\n              type=\"time\"\r\n              placeholder=\"HH:MM\"\r\n              name=\"startTime\"\r\n              className=\"custom-date\"\r\n              min={startDate || getCurrentTime()}\r\n              disabled={!startDate}\r\n              value={startTime ? startTime : startTimes?.[0]}\r\n              onChange={(e) => setStartTime(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n        <Col md={6} xl={6}>\r\n          <Form.Group controlId=\"end-timeId\" className=\"mb-3\">\r\n            <FormLabel className=\"fw-semibold fs-6\">End Time</FormLabel>\r\n            <Form.Control\r\n              type=\"time\"\r\n              placeholder=\"HH:MM\"\r\n              className=\"custom-date\"\r\n              name=\"endTime\"\r\n              min={startTime}\r\n              value={endTime ? endTime : endTimes?.[1]}\r\n              disabled={!startTime}\r\n              // onChange={(e) => setEndTime(e.target.value)}\r\n              onChange={handleEndTimeChange}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n        {validationMessage && <FieldError message={validationMessage} />}\r\n\r\n        <Col md={6} xl={6}>\r\n          <Form.Group controlId=\"fee\">\r\n            <Form.Label className=\"fw-bold\">Fee (€)</Form.Label>\r\n            <Form.Control\r\n              size=\"lg\"\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              placeholder=\"Enter Fee (1.36)\"\r\n              min={0}\r\n              {...register(\"feeValue\", { required: true })}\r\n              defaultValue={\r\n                extractedData?.length > 0 ? extractedData[0].Fee : \"\"\r\n              }\r\n              required\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n        <div className=\"d-grid mt-4\">\r\n          <Button\r\n            className=\"block\"\r\n            variant=\"primary primary_bg\"\r\n            size=\"lg\"\r\n            type=\"submit\"\r\n            disabled={validationMessage}\r\n          >\r\n            Create Slot\r\n          </Button>\r\n        </div>\r\n      </Row>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default SingleDaySlot;\r\n","import Tab from \"react-bootstrap/Tab\";\r\nimport Tabs from \"react-bootstrap/Tabs\";\r\nimport FormModal from \"../../../components/Modal/FormModal\";\r\nimport RecurringSlot from \"./Component/RecurringSlot\";\r\nimport SingleDaySlot from \"./Component/SingleDaySlot\";\r\n\r\nexport default function AddNewSlot({ children, ...rest }) {\r\n  const { show, handleClose } = rest;\r\n\r\n  return (\r\n    <div id=\"AddSlot_modal\" className=\"AddSlot_modal\">\r\n      <FormModal\r\n        className=\"modal-lg slots__creation-modal\"\r\n        title=\"Time Slot Creation\"\r\n        handleClose={handleClose}\r\n        show={show}\r\n      >\r\n        <div className=\"px-2 pb-3 addSlot_content\">\r\n          <Tabs\r\n            defaultActiveKey=\"1\"\r\n            id=\"uncontrolled-tab-example slot_tabs\"\r\n            className=\"mx-1 mb-1 slot_tabs\"\r\n          >\r\n            {/* Tab 1 */}\r\n            <Tab eventKey=\"1\" className=\"mx-1 slot_tab\" title=\"Single Day\">\r\n              <SingleDaySlot\r\n                handleClose={handleClose}\r\n              />\r\n            </Tab>\r\n\r\n            {/* Tab 2 */}\r\n            <Tab eventKey=\"2\" title=\"Recurring\" className=\"mx-1 slot_tab\">\r\n              <RecurringSlot\r\n                handleClose={handleClose}\r\n              />\r\n            </Tab>\r\n          </Tabs>\r\n        </div>\r\n      </FormModal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { Button, Card, Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport AddNewSlot from \"./AddNewSlot\";\r\nimport moment from \"moment\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getAllSlots,\r\n  updateDoctorSchedule,\r\n} from \"../../../app/features/doctorSchedule/doctorSchedule.slice\";\r\nimport FormModal from \"../../../components/Modal/FormModal\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { FaCircle } from \"react-icons/fa\";\r\nimport GenericDatePicker from \"../../../components/GenericDatePicker\";\r\n\r\nconst Slots = () => {\r\n  const dispatch = useDispatch();\r\n  const { handleSubmit, register } = useForm();\r\n  const [slotDate, setSlotDate] = useState(new Date());\r\n  const [show, setShow] = useState(false);\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n  const handleShow = () => setShow(true);\r\n  const handleShowUpdate = () => setShowUpdate(true);\r\n  const handleCloseUpdate = () => setShowUpdate(false);\r\n  const handleClose = () => setShow(false);\r\n  const { allSlots } = useSelector((state) => state.doctorSchedule);\r\n\r\n  function getDayName(date = new Date(slotDate), locale = \"en-US\") {\r\n    return date?.toLocaleDateString(locale, { weekday: \"long\" });\r\n  }\r\n  const dayName = getDayName();\r\n  const displayDate = useMemo(() => {\r\n    return slotDate\r\n      ? `${dayName} - ${moment(slotDate).format(\"DD-MM-YYYY\")}`\r\n      : \"Select Date\";\r\n  }, [slotDate, dayName]);\r\n\r\n  useEffect(() => {\r\n    if (slotDate) {\r\n      const finalData = {\r\n        date: moment(slotDate).format(\"YYYY-MM-DD\"),\r\n        month: null,\r\n      };\r\n      dispatch(getAllSlots(finalData));\r\n    }\r\n  }, [dispatch, slotDate]);\r\n\r\n  let fData = allSlots?.filter((slot) => slot.isBooked);\r\n  let notBookData = allSlots?.filter((slot) => !slot.isBooked);\r\n\r\n  function onSubmit(data) {\r\n    const updateFeeData = {\r\n      fee: data?.feeValue,\r\n    };\r\n    dispatch(updateDoctorSchedule({ updateFeeData }));\r\n    handleCloseUpdate();\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"create__slots-section d-flex flex-wrap justify-content-between align-items-center mb-3\">\r\n        <h5 className=\"m-0\">Created Slots</h5>\r\n        {moment(slotDate).format(\"YYYY-MM-DD\") >=\r\n          moment(new Date()).format(\"YYYY-MM-DD\") && (\r\n          <div className=\"slots__fees-btn\">\r\n            {((allSlots?.length > 0 && fData?.length <= 0) ||\r\n              notBookData?.length > 0) && (\r\n              <Button\r\n                onClick={() => {\r\n                  handleShowUpdate();\r\n                }}\r\n                className=\"btn-primary primary_bg me-2\"\r\n              >\r\n                Update Fees\r\n              </Button>\r\n            )}\r\n            <Button\r\n              onClick={() => {\r\n                handleShow();\r\n              }}\r\n              className=\"btn-primary primary_bg\"\r\n            >\r\n              Create Slot\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <Card className=\"slotsSection\">\r\n        <Card.Body>\r\n          <div className=\"d-flex flex-wrap justify-content-between align-items-center mb-4\">\r\n            <GenericDatePicker\r\n              selectedDateState={slotDate}\r\n              onChange={(date) => setSlotDate(date)}\r\n              useDrDateClass={false}\r\n              dateFormat=\"dd/MM/yyyy\"\r\n              placeholderText=\"day/month/year\"\r\n            />\r\n            <h5 className=\"text-black fw-bold mb-3 mx-3 d__date-text text-center\">{displayDate}</h5>\r\n            <div className=\"d-flex justify-content-end radioGroup mb-3\">\r\n              <div className=\"d-flex align-items-center me-sm-4 me-2\">\r\n                <span className=\"bookedSlot rounded-circle me-2\">\r\n                  <FaCircle color=\"#ff6060\" size=\"22\" />\r\n                </span>\r\n                <span>Booked Slots</span>\r\n              </div>\r\n              <div className=\"d-flex align-items-center\">\r\n                <span className=\"availableSlot rounded-circle me-2\">\r\n                  <FaCircle color=\"#81d363\" size=\"22\" />\r\n                </span>\r\n                <span>Available Slots</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {allSlots !== null && allSlots?.length > 0 ? (\r\n            <div className=\"slotContainer disable__btn-hover my-2\">\r\n              {allSlots?.map((slotItem) => {\r\n                return (\r\n                  <Button\r\n                    key={slotItem?.startTime}\r\n                    className={`slot_btn${slotItem?.isBooked ? \" booked\" : \"\"}`}\r\n                  >\r\n                    {slotItem?.startTime} - {slotItem?.endTime}\r\n                  </Button>\r\n                );\r\n              })}\r\n            </div>\r\n          ) : (\r\n            <p>No Slot Available</p>\r\n          )}\r\n        </Card.Body>\r\n        <AddNewSlot show={show} handleClose={handleClose} />\r\n      </Card>\r\n      <FormModal\r\n        className=\"modal-lg\"\r\n        title=\"Update Slot Fees\"\r\n        handleClose={handleCloseUpdate}\r\n        show={showUpdate}\r\n      >\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Row>\r\n            <Col sx={12}>\r\n              <Form.Group controlId=\"fee\">\r\n                <Form.Label className=\"fw-bold\">Fee (€)</Form.Label>\r\n                <Form.Control\r\n                  size=\"lg\"\r\n                  type=\"number\"\r\n                  step=\"0.01\"\r\n                  placeholder=\"Enter Fee (1.36)\"\r\n                  min={0}\r\n                  {...register(\"feeValue\", { required: true })}\r\n                  required\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n            <div className=\"d-grid mt-4\">\r\n              <Button\r\n                className=\"block\"\r\n                variant=\"primary primary_bg\"\r\n                size=\"lg\"\r\n                type=\"submit\"\r\n              >\r\n                Update Fee\r\n              </Button>\r\n            </div>\r\n          </Row>\r\n        </Form>\r\n      </FormModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Slots;\r\n"],"names":["FieldError","props","_jsx","className","children","message","ERROR","SYSTEM_ERROR","_ref","selectedDateState","onChange","dateFormat","placeholderText","datePickerClassName","useDrDateClass","console","log","_jsxs","concat","ReactDatePicker","selected","disabled","minDate","mindate","BsCalendarFill","size","FormModal","rest","handleClose","show","title","Modal","onHide","backdrop","Header","closeButton","Title","Body","handleSubmit","register","useForm","startDate1","setStartDate1","useState","endDate","setEndDate","startTimeRecurring","setStartTimeRecurring","endTimeRecurring","setEndTimeRecurring","weekDays","setWeekDays","validationMessage","setValidationMessage","dispatch","useDispatch","allSlots","useSelector","state","doctorSchedule","filteredSlots","filter","slot","isBooked","startTimes","map","startTime","endTimes","endTime","extractedData","scheduleId","Fee","handleCheckboxChange","e","value","checked","target","prevWeekDays","day","moveToNext","standardISODate","moment","format","finalData","date","month","getAllSlots","validateTimeDifference","start","end","Date","timeDifference","_Fragment","Form","onSubmit","data","_convertTimeIntoUTC","_convertTimeIntoUTC2","startDate","convertTimeIntoUTC","split","noOfDoctors","daysOfWeek","fee","feeValue","createDoctorSchedule","Check","type","id","label","Row","Col","md","xl","GenericDatePicker","dateValue","selectedDate","minEndDate","minEndDateStr","Group","controlId","FormLabel","Control","placeholder","min","selectedEndTime","isValidTimeDifference","Label","step","required","defaultValue","length","Button","variant","setEndTime","setStartDate","setStartTime","dayNamesArray","push","arguments","undefined","locale","toLocaleDateString","weekday","getDayName","getCurrentTime","name","AddNewSlot","Tabs","defaultActiveKey","Tab","eventKey","SingleDaySlot","RecurringSlot","Slots","slotDate","setSlotDate","setShow","showUpdate","setShowUpdate","handleCloseUpdate","dayName","displayDate","useMemo","useEffect","fData","notBookData","onClick","Card","FaCircle","color","slotItem","updateFeeData","updateDoctorSchedule","sx"],"sourceRoot":""}