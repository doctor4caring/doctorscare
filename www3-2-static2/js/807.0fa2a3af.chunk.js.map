{"version":3,"file":"static/js/807.0fa2a3af.chunk.js","mappings":"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","sources":["components/SearchInput/index.jsx","components/Table/DataTable.jsx","hook/useDebouncedSearch.js","pages/SuperAdmin/Dashboard/SuperAdminAppointments.jsx","pages/SuperAdmin/Dashboard/Calendar.jsx","pages/SuperAdmin/Dashboard/index.jsx","../node_modules/dom-helpers/esm/addClass.js","../node_modules/dom-helpers/esm/hasClass.js","../node_modules/dom-helpers/esm/removeClass.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { BiSearch } from \"react-icons/bi\";\r\n\r\nexport default function SearchInput({ onChange, ...props }) {\r\n  return (\r\n    <div className=\"position-relative me-2\">\r\n      <Form.Control\r\n        onChange={onChange}\r\n        type=\"text\"\r\n        placeholder=\"Search\"\r\n        className={`search-field-spacing ${props.className}`}\r\n        aria-label=\"Search\"\r\n      />\r\n      <BiSearch size={22} className=\"searchbar-icon\" />\r\n    </div>\r\n  );\r\n}\r\n","import BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function DataTable(props) {\r\n  const {\r\n    keyField,\r\n    tableColumns,\r\n    tableData,\r\n    pageNumber,\r\n    totalRecords,\r\n    handlePageChange,\r\n    dataPerPage,\r\n  } = props;\r\n\r\n  const emptyDataMessage = () => {\r\n    return <p className=\"record-message\">No Records to Display</p>;\r\n  };\r\n\r\n  const customTotal = (from, to, size) => (\r\n    <span className=\"react-bootstrap-table-pagination-total\">\r\n      {tableData?.length > 0 ? `${from} to ${to} out of ${size} entries` : null}\r\n    </span>\r\n  );\r\n\r\n  const paginateOptions = {\r\n    paginationSize: 5,\r\n    pageStartIndex: 1,\r\n    alwaysShowAllBtns: true,\r\n    withFirstAndLast: tableData?.length > 5 ? true : false,\r\n    hideSizePerPage: true,\r\n    showTotal: true,\r\n    paginationTotalRenderer: customTotal,\r\n    disablePageTitle: true,\r\n    sizePerPageList: [\r\n      {\r\n        text: dataPerPage,\r\n        value: dataPerPage,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <BootstrapTable\r\n      keyField={keyField}\r\n      headerClasses=\"header-class\"\r\n      data={tableData}\r\n      columns={tableColumns}\r\n      pagination={paginationFactory({\r\n        ...paginateOptions,\r\n        page: pageNumber,\r\n        totalSize: totalRecords,\r\n        onPageChange: handlePageChange,\r\n      })}\r\n      noDataIndication={emptyDataMessage}\r\n      remote\r\n      onTableChange={() => {}}\r\n      bordered={false}\r\n      wrapperClasses=\"table-responsive\"\r\n    />\r\n  );\r\n}\r\nDataTable.propTypes = {\r\n  tableData: PropTypes.array.isRequired,\r\n  tableColumns: PropTypes.array.isRequired,\r\n  keyField: PropTypes.node.isRequired,\r\n  pagination: PropTypes.bool,\r\n  paginateOptions: PropTypes.object,\r\n};\r\nDataTable.defaultProps = {\r\n  pagination: true,\r\n};\r\n","import { useState, useRef, useCallback } from 'react';\r\n\r\nconst useDebouncedSearch = (delay = 500) => {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const lastChange = useRef(null);\r\n\r\n  const handleSearch = useCallback((event) => {\r\n    if (lastChange.current) {\r\n      clearTimeout(lastChange.current);\r\n    }\r\n    lastChange.current = setTimeout(() => {\r\n      lastChange.current = null;\r\n      setSearchValue(event.target.value);\r\n    }, delay);\r\n  }, [delay]);\r\n\r\n  return [searchValue, handleSearch];\r\n};\r\n\r\nexport default useDebouncedSearch;\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { Badge, Card, Col, Dropdown, Form, Row } from \"react-bootstrap\";\r\nimport { BiSearch } from \"react-icons/bi\";\r\nimport { useState } from \"react\";\r\nimport { RiFilter2Fill } from \"react-icons/ri\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nimport { getAdminDashboardAptList } from \"../../../app/features/adminDashboard/adminDashboard.slice\";\r\nimport DataTable from \"../../../components/Table/DataTable\";\r\nimport FullScreenLoader from \"../../../authorization/FullScreenLoader\";\r\nimport useDebouncedSearch from \"../../../hook/useDebouncedSearch\";\r\nimport SearchInput from \"../../../components/SearchInput\";\r\n\r\nexport default function AdminAppointments() {\r\n  const [selectedOptions, setSelectedOptions] = useState(null);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const pageSize = useMemo(() => 10, []);\r\n  const [searchValue, handleSearch] = useDebouncedSearch(500);\r\n\r\n  const dispatch = useDispatch();\r\n  const { getAllApt, isLoading, isError, isSuccess } = useSelector(\r\n    (state) => state?.adminDashboard\r\n  );\r\n\r\n  useEffect(() => {\r\n    const finalData = {\r\n      pageNo: pageNumber,\r\n      size: pageSize,\r\n      isPagination: true,\r\n      search: searchValue ? searchValue : null,\r\n      statusId:\r\n        selectedOptions === \"205\"\r\n          ? 205\r\n          : selectedOptions === \"204\"\r\n          ? 204\r\n          : selectedOptions === \"206\"\r\n          ? 206\r\n          : selectedOptions === \"203\"\r\n          ? 203\r\n          : selectedOptions === \"201\"\r\n          ? 201\r\n          : selectedOptions === \"202\"\r\n          ? 202\r\n          : null,\r\n    };\r\n    dispatch(getAdminDashboardAptList(finalData));\r\n  }, [dispatch, searchValue, selectedOptions, pageNumber]);\r\n\r\n  const renderBadge = (status) => {\r\n    return status === 204 ? (\r\n      <Badge pill bg=\"info\" className=\"upcoming-badge\">\r\n        Upcoming\r\n      </Badge>\r\n    ) : status === 201 ? (\r\n      <Badge pill bg=\"primary\" className=\"pending-badge\">\r\n        Pending\r\n      </Badge>\r\n    ) : status === 205 ? (\r\n      <Badge pill bg=\"danger\" className=\"missed-badge\">\r\n        Missed\r\n      </Badge>\r\n    ) : status === 206 ? (\r\n      <Badge pill bg=\"light\" className=\"completed-badge\">\r\n        Completed\r\n      </Badge>\r\n    ) : status === 203 ? (\r\n      <Badge pill bg=\"warning\" className=\"cancelled-badge\">\r\n        Cancelled\r\n      </Badge>\r\n    ) : (\r\n      <Badge>Booked</Badge>\r\n    );\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      dataField: \"id\",\r\n      text: \"ID\",\r\n    },\r\n    {\r\n      dataField: \"doctorName\",\r\n      text: \"Doctor Name\",\r\n      formatter: (cell) => {\r\n        return cell || \"N/A\";\r\n      },\r\n    },\r\n    {\r\n      dataField: \"patientName\",\r\n      text: \"Patient Name\",\r\n      formatter: (cell) => {\r\n        return cell || \"N/A\";\r\n      },\r\n    },\r\n    {\r\n      dataField: \"appointmentDate\",\r\n      text: \"Date\",\r\n      formatter: (cell) => {\r\n        return cell ? moment(cell).format(\"DD/MM/YYYY\") : \"N/A\";\r\n      },\r\n    },\r\n    {\r\n      dataField: \"appointmentTime\",\r\n      text: \"Time\",\r\n      formatter: (cell) => {\r\n        return cell || \"N/A\";\r\n      },\r\n    },\r\n    {\r\n      dataField: \"status\",\r\n      text: \"Status\",\r\n      formatter: (text, row) => renderBadge(row?.statusId),\r\n    },\r\n  ];\r\n\r\n  const options = [\r\n    { label: \"Missed\", value: 205 },\r\n    { label: \"Upcoming\", value: 204 },\r\n    { label: \"Completed\", value: 206 },\r\n    { label: \"Cancelled\", value: 203 },\r\n    { label: \"Pending\", value: 201 },\r\n    { label: \"Booked\", value: 202 },\r\n  ];\r\n\r\n  const handlePageChange = (page, sizePerPage) => {\r\n    setPageNumber(page);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className=\"mb-0\">\r\n        <Card.Body className=\"p-0\">\r\n          <Row className=\"mx-2 my-2\">\r\n            <Col md={4} className=\"d-flex align-items-center\">\r\n              <Card.Title className=\"mb-0\">Appointments</Card.Title>\r\n            </Col>\r\n            <Col\r\n              md={8}\r\n              className=\"d-flex align-self-center justify-content-end\"\r\n            >\r\n              <SearchInput onChange={handleSearch} />\r\n\r\n              <Dropdown className=\"apt-filter-dropdown\">\r\n                <Dropdown.Toggle\r\n                  variant=\"secondary\"\r\n                  id=\"checkbox-dropdown\"\r\n                  className=\"custom-outline-filter py-2\"\r\n                >\r\n                  <RiFilter2Fill size={28} className=\"color-99\" />\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Form>\r\n                    {options.map((option) => (\r\n                      <Form.Check\r\n                        key={option.value}\r\n                        type=\"checkbox\"\r\n                        label={option.label}\r\n                        value={option.value}\r\n                        checked={\r\n                          selectedOptions === null\r\n                            ? false\r\n                            : selectedOptions.includes(option.value)\r\n                        }\r\n                        onChange={(event) =>\r\n                          setSelectedOptions(\r\n                            selectedOptions === event.target.value\r\n                              ? null\r\n                              : event.target.value\r\n                          )\r\n                        }\r\n                      />\r\n                    ))}\r\n                  </Form>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </Col>\r\n          </Row>\r\n          {isLoading ? (\r\n            <FullScreenLoader fullHeight={true} />\r\n          ) : isSuccess ? (\r\n            <span className=\"patient-datatable apt-badge\">\r\n              <DataTable\r\n                tableColumns={columns}\r\n                tableData={getAllApt?.data ? getAllApt?.data : []}\r\n                keyField=\"id\"\r\n                pageNumber={pageNumber}\r\n                totalRecords={getAllApt?.totalCounts}\r\n                dataPerPage={pageSize}\r\n                handlePageChange={handlePageChange}\r\n              />\r\n            </span>\r\n          ) : isError ? (\r\n            <p className=\"my-5 text-center text-danger fst-italic\">\r\n              Network Error\r\n            </p>\r\n          ) : null}\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport IMAGES from \"../../../assets/images\";\r\nimport { AiFillClockCircle } from \"react-icons/ai\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { getAllAppointment } from \"../../../app/features/appointment/appointment.slice\";\r\n\r\nexport default function Calendar() {\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const dispatch = useDispatch();\r\n  const { allAppointment, isLoading, isSuccess, isError } = useSelector(\r\n    (state) => state?.appointment\r\n  );\r\n\r\n  useEffect(() => {\r\n    const finalData = {\r\n      isDashbaordAppointment: true,\r\n      startdate: startDate\r\n        ? moment(startDate).format(\"YYYY-MM-DD\")\r\n        : moment(new Date()).format(\"YYYY-MM-DD\"),\r\n      endDate: startDate\r\n        ? moment(startDate).format(\"YYYY-MM-DD\")\r\n        : moment(new Date()).format(\"YYYY-MM-DD\"),\r\n      statusId: 202,\r\n    };\r\n    dispatch(getAllAppointment(finalData));\r\n  }, [dispatch, startDate]);\r\n\r\n  return (\r\n    <>\r\n      <Card className=\"py-4 m-0\">\r\n        <span className=\"d-flex align-items-center px-4 pb-0 \">\r\n          <img\r\n            src={IMAGES.APPOINTMENT_ICON}\r\n            alt=\"new patient icon\"\r\n            style={{ width: \"20px\" }}\r\n            className=\"me-2 color-dk-blue\"\r\n          />\r\n          <Card.Title className=\"m-0\">Calendar</Card.Title>\r\n        </span>\r\n        <Card.Body className=\"px-0\">\r\n          <span className=\"patient-calendar\">\r\n            <DatePicker\r\n              selected={startDate}\r\n              onChange={(date) => setStartDate(date)}\r\n              startDate={startDate}\r\n              inline\r\n            />\r\n          </span>\r\n        </Card.Body>\r\n        <div className=\"px-3\" style={{ height: \"13.5rem\" }}>\r\n          <p style={{ fontSize: \"20px\", fontWeight: 500 }}>\r\n            Upcoming Appointment\r\n          </p>\r\n          <div className=\"h-100 upcoming__apt-section no-margin-bottom-last\">\r\n            {isLoading ? (\r\n              <span\r\n                className=\"fst-italic h-100 d-flex justify-content-center align-items-center flex-column\"\r\n                style={{\r\n                  color: \"#999999\",\r\n                }}\r\n              >\r\n                Loading...\r\n              </span>\r\n            ) : isSuccess ? (\r\n              allAppointment?.data?.length > 0 ? (\r\n                allAppointment?.data?.map((item, index) => (\r\n                  <Card.Body className=\"mb-3 calendar-card\">\r\n                    <Card.Title style={{ fontSize: \"24px\" }}>\r\n                      {/* {item.appointmentTitle} */}\r\n                    </Card.Title>\r\n                    <div className=\"d-flex align-items-center\">\r\n                      <span className=\"me-3 apt-inner-card p-2 d-flex align-items-center flex-column\">\r\n                        <p\r\n                          style={{ fontSize: \"26px\", fontWeight: 600 }}\r\n                          className=\"mb-0\"\r\n                        >\r\n                          {moment(item?.appointmentDate).format(\"MMM DD\")}\r\n                        </p>\r\n                        <p className=\"m-0 table-normal-text\">\r\n                          <AiFillClockCircle\r\n                            className=\"me-2\"\r\n                            style={{ color: \"#999999\" }}\r\n                          />\r\n                          {item?.appointmentStartTime}\r\n                        </p>\r\n                      </span>\r\n                      <span style={{ lineHeight: \"1.4\" }}>\r\n                        <p className=\"m-0\" style={{ fontSize: \"18px\" }}>\r\n                          <span className=\"font-weight-600\">Patient:</span>{\" \"}\r\n                          {item?.patientName}\r\n                        </p>\r\n                        <p className=\"m-0\" style={{ fontSize: \"18px\" }}>\r\n                          <span className=\"font-weight-600\">Doctor:</span>{\" \"}\r\n                          {item?.doctorName}\r\n                        </p>\r\n                      </span>\r\n                    </div>\r\n                    <span>\r\n                      <p className=\"color-99 mt-3 mb-2\">Reason:</p>\r\n                      <p\r\n                        className=\"mb-0\"\r\n                        style={{ fontSize: \"16px\", fontWeight: 500 }}\r\n                      >\r\n                        {item?.reasonForAppoinment\r\n                          ? item?.reasonForAppoinment\r\n                          : \"N/A\"}\r\n                      </p>\r\n                    </span>\r\n                  </Card.Body>\r\n                ))\r\n              ) : (\r\n                <div className=\"h-100 py-2 d-flex justify-content-center align-items-center flex-column\">\r\n                  <img\r\n                    src={IMAGES.UPCOMING_APPOINTMENT_ICON}\r\n                    alt=\"upcoming appointment\"\r\n                  />\r\n                  <p\r\n                    className=\"mb-0 mt-2 color-99 text-center\"\r\n                    style={{ fontSize: \"20px\", fontWeight: 400, width: \"54%\" }}\r\n                  >\r\n                    No appointment scheduled\r\n                  </p>\r\n                </div>\r\n              )\r\n            ) : isError ? (\r\n              <span className=\"text-danger fst-italic h-100 d-flex justify-content-center align-items-center flex-column\">\r\n                Network Error\r\n              </span>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport IMAGES from \"../../../assets/images\";\r\nimport Calendar from \"./Calendar\";\r\nimport { getAdminDashCount } from \"../../../app/features/adminDashboard/adminDashboard.slice\";\r\nimport AdminAppointments from \"./SuperAdminAppointments\";\r\nimport { PATH } from \"../../../utils/path\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function Dashboard() {\r\n  const dispatch = useDispatch();\r\n  const { adminDashCount, isLoading, isError, isSuccess } = useSelector(\r\n    (state) => state?.adminDashboard\r\n  );\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    dispatch(getAdminDashCount());\r\n  }, [dispatch]);\r\n  return (\r\n    <>\r\n      <Row className=\"main-row patient-dashbaord\">\r\n        <Col xl={3} md={6} xs={12} className=\"xs-margin-bottom mb-3\">\r\n          <Card\r\n            className=\"h-100 admin__count-card\"\r\n            onClick={() =>\r\n              navigate(`${PATH.SUPERADMIN_USERMANAGEMENT}?role=admin`)\r\n            }\r\n          >\r\n            <Card.Body className=\"d-flex justify-content-between align-items-center p-4\">\r\n              <span>\r\n                <Card.Title>Total Admins</Card.Title>\r\n                {isLoading ? (\r\n                  <span\r\n                    className=\"fst-italic\"\r\n                    style={{\r\n                      color: \"#999999\",\r\n                    }}\r\n                  >\r\n                    Loading...\r\n                  </span>\r\n                ) : isSuccess ? (\r\n                  <h3 className=\"mb-0\">\r\n                    {adminDashCount && adminDashCount?.totalAdmin}\r\n                  </h3>\r\n                ) : isError ? (\r\n                  <span className=\"text-danger fst-italic\">Network Error</span>\r\n                ) : null}\r\n              </span>\r\n              <img\r\n                src={IMAGES.ADMIN_USER_ICON}\r\n                alt=\"total admins\"\r\n                className=\"color-dk-blue\"\r\n              />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col xl={3} md={6} xs={12} className=\"xs-margin-bottom mb-3\">\r\n          <Card\r\n            className=\"h-100 admin__count-card\"\r\n            onClick={() =>\r\n              navigate(`${PATH.SUPERADMIN_USERMANAGEMENT}?role=doctor`)\r\n            }\r\n          >\r\n            <Card.Body className=\"d-flex justify-content-between align-items-center p-4\">\r\n              <span>\r\n                <Card.Title>Total Doctors</Card.Title>\r\n                {isLoading ? (\r\n                  <span\r\n                    className=\"fst-italic\"\r\n                    style={{\r\n                      color: \"#999999\",\r\n                    }}\r\n                  >\r\n                    Loading...\r\n                  </span>\r\n                ) : isSuccess ? (\r\n                  <h3 className=\"mb-0\">\r\n                    {adminDashCount && adminDashCount?.totalDoctor}\r\n                  </h3>\r\n                ) : isError ? (\r\n                  <span className=\"text-danger fst-italic\">Network Error</span>\r\n                ) : null}\r\n              </span>\r\n              <img\r\n                src={IMAGES.TOTAL_DOCTORS_ICON}\r\n                alt=\"total doctors\"\r\n                className=\"color-dk-blue\"\r\n              />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col xl={3} md={6} xs={12} className=\"xs-margin-bottom mb-3\">\r\n          <Card\r\n            className=\"h-100 admin__count-card\"\r\n            onClick={() =>\r\n              navigate(`${PATH.SUPERADMIN_USERMANAGEMENT}?role=patient`)\r\n            }\r\n          >\r\n            <Card.Body className=\"d-flex justify-content-between align-items-center p-4\">\r\n              <span>\r\n                <Card.Title>Total Patients</Card.Title>\r\n                {isLoading ? (\r\n                  <span\r\n                    className=\"fst-italic\"\r\n                    style={{\r\n                      color: \"#999999\",\r\n                    }}\r\n                  >\r\n                    Loading...\r\n                  </span>\r\n                ) : isSuccess ? (\r\n                  <h3 className=\"mb-0\">\r\n                    {adminDashCount && adminDashCount?.totalPatient}\r\n                  </h3>\r\n                ) : isError ? (\r\n                  <span className=\"text-danger fst-italic\">Network Error</span>\r\n                ) : null}\r\n              </span>\r\n              <img\r\n                src={IMAGES.NEW_PATIENT_ICON}\r\n                alt=\"total patients\"\r\n                className=\"color-dk-blue\"\r\n              />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col xl={3} md={6} xs={12} className=\"xs-margin-bottom mb-3\">\r\n          <Card\r\n            className=\"h-100 admin__count-card\"\r\n            onClick={() =>\r\n              navigate(`${PATH.SUPERADMIN_USERMANAGEMENT}?role=staff`)\r\n            }\r\n          >\r\n            <Card.Body className=\"d-flex justify-content-between align-items-center p-4\">\r\n              <span>\r\n                <Card.Title>Total Staff</Card.Title>\r\n                {isLoading ? (\r\n                  <span\r\n                    className=\"fst-italic\"\r\n                    style={{\r\n                      color: \"#999999\",\r\n                    }}\r\n                  >\r\n                    Loading...\r\n                  </span>\r\n                ) : isSuccess ? (\r\n                  <h3 className=\"mb-0\">\r\n                    {adminDashCount && adminDashCount?.totalStaff}\r\n                  </h3>\r\n                ) : isError ? (\r\n                  <span className=\"text-danger fst-italic\">Network Error</span>\r\n                ) : null}\r\n              </span>\r\n              <img\r\n                src={IMAGES.TOTAL_STAFF_ICON}\r\n                alt=\"total staff\"\r\n                className=\"color-dk-blue\"\r\n              />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row>\r\n        <Col xl={8} xs={12}>\r\n          <Row>\r\n            <Col xs={12} className=\"mb-3\">\r\n              <AdminAppointments />\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        <Col xl={4} xs={12}>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <Calendar />\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n","import hasClass from './hasClass';\n/**\n * Adds a CSS class to a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","/**\n * Checks if a given element has a CSS class.\n * \n * @param element the element\n * @param className the CSS class name\n */\nexport default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}","function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n/**\n * Removes a CSS class from a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", {\n  ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["SearchInput","_ref","onChange","props","_jsxs","className","children","_jsx","Form","Control","type","placeholder","concat","BiSearch","size","DataTable","keyField","tableColumns","tableData","pageNumber","totalRecords","handlePageChange","dataPerPage","paginateOptions","paginationSize","pageStartIndex","alwaysShowAllBtns","withFirstAndLast","length","hideSizePerPage","showTotal","paginationTotalRenderer","customTotal","from","to","disablePageTitle","sizePerPageList","text","value","BootstrapTable","headerClasses","data","columns","pagination","paginationFactory","page","totalSize","onPageChange","noDataIndication","emptyDataMessage","remote","onTableChange","bordered","wrapperClasses","defaultProps","delay","arguments","undefined","searchValue","setSearchValue","useState","lastChange","useRef","useCallback","event","current","clearTimeout","setTimeout","target","AdminAppointments","selectedOptions","setSelectedOptions","setPageNumber","pageSize","useMemo","handleSearch","useDebouncedSearch","dispatch","useDispatch","getAllApt","isLoading","isError","isSuccess","useSelector","state","adminDashboard","useEffect","finalData","pageNo","isPagination","search","statusId","getAdminDashboardAptList","dataField","formatter","cell","moment","format","row","renderBadge","status","Badge","pill","bg","_Fragment","Card","Body","Row","Col","md","Title","Dropdown","Toggle","variant","id","RiFilter2Fill","Menu","label","map","option","Check","checked","includes","FullScreenLoader","fullHeight","totalCounts","sizePerPage","Calendar","_allAppointment$data","_allAppointment$data2","startDate","setStartDate","Date","allAppointment","appointment","isDashbaordAppointment","startdate","endDate","getAllAppointment","src","IMAGES","APPOINTMENT_ICON","alt","style","width","DatePicker","selected","date","inline","height","fontSize","fontWeight","color","item","index","appointmentDate","AiFillClockCircle","appointmentStartTime","lineHeight","patientName","doctorName","reasonForAppoinment","UPCOMING_APPOINTMENT_ICON","Dashboard","adminDashCount","navigate","useNavigate","getAdminDashCount","xl","xs","onClick","PATH","SUPERADMIN_USERMANAGEMENT","totalAdmin","ADMIN_USER_ICON","totalDoctor","TOTAL_DOCTORS_ICON","totalPatient","NEW_PATIENT_ICON","totalStaff","TOTAL_STAFF_ICON","addClass","element","classList","add","contains","baseVal","indexOf","hasClass","setAttribute","replaceClassName","origClass","classToRemove","replace","RegExp","removeClass","remove","React","p","ref","classNames"],"sourceRoot":""}